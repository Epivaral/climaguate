@* --- Crop Detail Modal --- *@
<div class="modal fade @(showCropModal ? "show d-block" : "")" tabindex="-1" style="background:rgba(0,0,0,0.4);" @onclick="CloseCropModal" hidden="@(showCropModal ? false : true)">
    <div class="modal-dialog modal-lg modal-dialog-centered" @onclick:stopPropagation="true">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@selectedCropDetail?.CropNameSpanish</h5>
                <button type="button" class="btn-close" @onclick="CloseCropModal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-4 d-flex align-items-center justify-content-center">
                        @if (!string.IsNullOrEmpty(selectedCropDetail?.CropPicture))
                        {
                            <img src="@selectedCropDetail.CropPicture" alt="Crop Image" class="img-fluid border rounded" style="max-height:160px;max-width:100%;object-fit:contain;" />
                        }
                        else
                        {
                            <div class="d-flex align-items-center justify-content-center border rounded bg-light" style="height:160px;width:100%;font-size:2.5rem;color:#bbb;">
                                X
                            </div>
                        }
                    </div>
                    <div class="col-md-8">
                        <dl class="row mb-0">
                            <dt class="col-5">Descripci√≥n</dt>
                            <dd class="col-7">@(!string.IsNullOrEmpty(selectedCropDetail?.Description) ? selectedCropDetail.Description : "no info")</dd>
                            <dt class="col-5">Temp. √ìptima</dt>
                            <dd class="col-7">@selectedCropDetail?.OptimalTempMin¬∞C - @selectedCropDetail?.OptimalTempMax¬∞C</dd>
                            <dt class="col-5">Humedad √ìptima</dt>
                            <dd class="col-7">@selectedCropDetail?.OptimalHumidityMin% - @selectedCropDetail?.OptimalHumidityMax%</dd>
                            <dt class="col-5">Meses de Siembra</dt>
                            <dd class="col-7">@selectedCropDetail?.PlantingMonthsSpanish</dd>
                            <dt class="col-5">Meses de Cosecha</dt>
                            <dd class="col-7">@selectedCropDetail?.HarvestMonthsSpanish</dd>
                            <dt class="col-5">Requerimiento Agua</dt>
                            <dd class="col-7">@selectedCropDetail?.WaterRequirementMmPerWeek mm/semana (@selectedCropDetail?.WaterRequirementSpanish)</dd>
                            <dt class="col-5">Ciclo (d√≠as)</dt>
                            <dd class="col-7">@selectedCropDetail?.GrowthCycleDays</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@* 
    =============================================================================
    CLIMAGUATE - AGRICULTURAL WEATHER INDEX PAGE
    =============================================================================
    This page provides agricultural weather information for Guatemala farmers.
    
    Key Features:
    - City selection for agricultural data
    - Crop suitability information with scores
    - Climate zone and soil type information
    - Agricultural recommendations based on weather conditions
    
    Technical Implementation:
    - Uses Blazor Server with C# code-behind
    - HttpClient for API communication to GetCropsByCity stored procedure
    - Responsive table design for crop data display
    =============================================================================
*@

@page "/agriculture"
@inject HttpClient HttpClient
@using System.Text.Json
@using System.Text.Json.Serialization

<PageTitle>Agricultura - Climaguate</PageTitle>

<!-- Custom CSS for better color contrast -->
<style>
    .text-warning {
        color: #EF6C00 !important;
    }
</style>

<!-- Construction/Progress Banner -->
<div class="alert alert-warning mb-4" role="alert">
    <div>
        <h6 class="alert-heading mb-1">üöß P√°gina en Construcci√≥n</h6>
        <p class="mb-0" style="font-size:0.85rem; line-height:1.6;">
            Esta funcionalidad est√° actualmente <strong>en desarrollo</strong>. 
            Los datos mostrados son <strong>√∫nicamente para demostraci√≥n</strong> y pueden no reflejar 
            condiciones agr√≠colas reales. Use esta informaci√≥n solo como referencia general.
        </p>
    </div>
</div>



<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <img src="/images/logo.png" alt="logo" style="height:80px" />
        <h1 class="d-inline-block ms-3" style="color:#2B4C6F; font-size:1.8rem;">üå± √çndice Agr√≠cola</h1>
    </div>
</div>
<hr/>

<div class="row">
    <div class="col-md-12">
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title" style="color:#2B4C6F; font-size:1.1rem;">Informaci√≥n Agr√≠cola por Ciudad</h5>
                <hr style="border-color:#7BCDC8; border-width:2px;"/>
                
                @if (cities != null && cities.Any())
                {
                    <div class="row mb-3" style="font-size:0.85rem; line-height:1.6;">
                        <div class="col-md-6">
                            <label for="citySelect" class="form-label">Seleccionar Ciudad:</label>
                            <select id="citySelect" class="form-select" @onchange="OnCityChanged">
                                <option value="">-- Seleccione una ciudad --</option>
                                @foreach (var city in cities)
                                {
                                    <option value="@city.CityCode">@city.CityName</option>
                                }
                            </select>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(selectedCityCode))
                {
                    <div class="row mb-4" style="font-size:0.85rem; line-height:1.6;">
                        <div class="col-md-12">
                            <h6 style="color:#2B4C6F; font-size:1rem;">Informaci√≥n de la Ciudad</h6>
                            @if (crops != null && crops.Any())
                            {
                                var cityInfo = crops.First(); // All crops have the same city info
                                <div class="row mb-2">
                                    <div class="col-md-3">
                                        <strong>Elevaci√≥n:</strong> @cityInfo.ElevationMeters m
                                    </div>
                                    <div class="col-md-4">
                                        <strong>Tipo de Suelo:</strong> @GetSoilTypeDescription(cityInfo.SoilType)
                                    </div>
                                    <div class="col-md-5">
                                        <strong>Zona Clim√°tica:</strong> @GetClimateDescription(cityInfo.ClimateZone)
                                    </div>
                                </div>
                                @if (currentWeather != null)
                                {
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="alert alert-info p-3 mb-2" style="background-color:#e6f7fa; border:none; color:#155263; font-size:1.02rem; border-radius: 14px; box-shadow: 0 2px 8px 0 #e0e0e0;">
                                                <div class="d-flex flex-column flex-md-row align-items-md-center justify-content-between gap-2 w-100">
                                                    <div class="d-flex flex-column flex-md-row align-items-md-center gap-3">
                                                        <div class="fw-bold" style="font-size:1.08rem; min-width:220px;">
                                                            <span style="font-size:1.2em;">üìç</span> Condiciones Actuales:
                                                        </div>
                                                        <div class="d-flex flex-wrap align-items-center gap-3" style="font-size:1.05rem;">
                                                            <span><span style="font-size:1.15em;">üå°Ô∏è</span> <span class="fw-bold">@currentWeather.Main_Temp.ToString("F1")¬∞C</span></span>
                                                            <span><span style="font-size:1.15em;">üíß</span> <span class="fw-bold">@currentWeather.Main_Humidity%</span></span>
                                                            <span><span style="font-size:1.15em;">üåßÔ∏è</span> <span class="fw-bold">@(currentWeather.Rain_1h != null && currentWeather.Rain_1h != "n/a" ? currentWeather.Rain_1h + " mm (1h)" : "Sin lluvia")</span></span>
                                                            <span style="font-size:0.98em; color:#155263;">@currentWeather.Weather_Description</span>
                                                        </div>
                                                    </div>
                                                    
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else if (selectedCity != null)
                            {
                                <div class="row mb-2">
                                    <div class="col-md-3">
                                        <strong>Elevaci√≥n:</strong> @selectedCity.ElevationMeters m
                                    </div>
                                    <div class="col-md-4">
                                        <strong>Tipo de Suelo:</strong> @GetSoilTypeDescription(selectedCity.SoilType)
                                    </div>
                                    <div class="col-md-5">
                                        <strong>Zona Clim√°tica:</strong> @GetClimateDescription(selectedCity.ClimateZone)
                                    </div>
                                </div>
                                @if (currentWeather != null)
                                {
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="alert alert-info py-2" style="font-size:0.8rem; margin-bottom:0;">
                                                <strong>üå°Ô∏è Condiciones Actuales:</strong> 
                                                Temperatura: <strong>@currentWeather.Main_Temp.ToString("F1")¬∞C</strong> | 
                                                Humedad: <strong>@currentWeather.Main_Humidity%</strong> | 
                                                Lluvia: <strong>@(currentWeather.Rain_1h != null && currentWeather.Rain_1h != "n/a" ? currentWeather.Rain_1h + " mm (1h)" : "Sin lluvia")</strong> | 
                                                @currentWeather.Weather_Description
                                                <small class="d-block mt-1" style="color:#666;">
                                                    Las puntuaciones de aptitud se calculan en tiempo real con estos datos meteorol√≥gicos.
                                                </small>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>

                    @if (crops != null && crops.Any())
                    {
                        <h6 style="color:#2B4C6F; font-size:1rem;">Cultivos Recomendados</h6>
                        
                        <!-- Seasonal Activity Legend -->
                        <div class="table-responsive mb-3">
                            <table class="table table-sm table-bordered" style="font-size:0.75rem;">
                                <thead style="background-color:#f8f9fa;">
                                    <tr>
                                        <th>Actividad</th>
                                        <th>Descripci√≥n</th>
                                        <th>Icono</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td><strong>Siembra</strong></td>
                                        <td>√âpoca ideal para plantar el cultivo</td>
                                        <td><span class="badge bg-success">üå± Siembra</span></td>
                                    </tr>
                                    <tr>
                                        <td><strong>Cosecha</strong></td>
                                        <td>√âpoca de recolecci√≥n del cultivo</td>
                                        <td><span class="badge bg-warning text-dark">üåæ Cosecha</span></td>
                                    </tr>
                                    <tr>
                                        <td><strong>Mantenimiento</strong></td>
                                        <td>Cuidados generales: riego, fertilizaci√≥n, control de plagas</td>
                                        <td><span class="badge bg-info text-dark">üîß Mantenimiento</span></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>

                        <!-- Score Explanation (Collapsible) -->
                        <button class="btn btn-outline-secondary btn-sm mb-2" type="button" data-bs-toggle="collapse" data-bs-target="#collapseScoreExplanation" aria-expanded="false" aria-controls="collapseScoreExplanation">
                            Ver explicaci√≥n del sistema de puntuaci√≥n
                        </button>
                        <div class="collapse" id="collapseScoreExplanation">
                            <div class="alert alert-info mb-4" role="alert">
                                <div class="d-flex align-items-start">
                                    <div class="me-2">
                                        <i class="bi bi-info-circle-fill" style="font-size: 1.2rem;"></i>
                                    </div>
                                    <div>
                                        <h6 class="alert-heading mb-2">üìä ¬øC√≥mo se calcula la puntuaci√≥n de cultivos?</h6>
                                        <p class="mb-1" style="font-size:0.9rem; line-height:1.5;">
                                            <strong>La puntuaci√≥n se basa en qu√© tan cerca est√°n las condiciones actuales de lo ideal para cada cultivo:</strong>
                                        </p>
                                        <ul class="mb-0" style="font-size:0.85rem; line-height:1.4;">
                                            <li><strong>üå°Ô∏è Temperatura (60% del puntaje):</strong> Si est√° en el rango √≥ptimo ‚Üí se otorga el puntaje m√°ximo. Si se desv√≠a (muy alta o muy baja) ‚Üí recibe menos puntaje proporcionalmente.</li>
                                            <li><strong>üíß Humedad (40% del puntaje):</strong> Si la humedad est√° en el rango ideal ‚Üí recibe el 40% completo. Si no ‚Üí se reduce el puntaje con base en cu√°n alejada est√© del ideal.</li>
                                            <li><strong>Resultado final:</strong> Un cultivo puede tener una buena puntuaci√≥n incluso si un factor no es perfecto, siempre que el otro lo compense.</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row" style="font-size:0.85rem; line-height:1.6;">
                            @foreach (var crop in crops.Take(6)) // Show top 6 crops as cards
                            {
                                <div class="col-md-4 mb-3">
                                    <div class="card h-100 @GetCardBorderClass(crop.CurrentSuitabilityScore)" style="cursor:pointer;" @onclick="() => ShowCropModal(crop.CropCode)">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <h6 class="card-title mb-0" style="color:#2B4C6F; font-size:0.9rem;">@crop.CropNameSpanish</h6>
                                                <span class="@GetSuitabilityDotClass(crop.SuitabilityLabel)">‚óè</span>
                                            </div>
                                            <!-- Big percentage score -->
                                            <div class="text-center mb-2">
                                                <span style="font-size:2.5rem; font-weight:bold; color:@GetScoreColor(crop.CurrentSuitabilityScore);">
                                                    @crop.CurrentSuitabilityScore%
                                                </span>
                                                <div style="font-size:0.7rem; color:#666;">
                                                    @GetSuitabilityText(crop.SuitabilityLabel)
                                                </div>
                                            </div>
                                            <!-- Seasonal activity tag -->
                                            <div class="text-center mb-2">
                                                <span class="badge @GetSeasonBadgeClass(crop.CurrentSeasonActivity)" style="font-size:0.7rem;">
                                                    @GetSeasonText(crop.CurrentSeasonActivity)
                                                </span>
                                                @if (crop.IsPrimary)
                                                {
                                                    <span class="badge bg-warning text-dark ms-1" style="font-size:0.7rem;">Principal</span>
                                                }
                                            </div>
                                            <!-- Rain warning -->
                                            @if (!string.IsNullOrEmpty(GetRainWarning(crop, crop.CurrentSeasonActivity)))
                                            {
                                                <div class="text-center mb-2">
                                                    <span class="badge @GetRainWarningClass(crop, currentWeather)" style="font-size:0.7rem;">
                                                        @GetRainWarning(crop, crop.CurrentSeasonActivity)
                                                    </span>
                                                </div>
                                            }
                                            <!-- Temperature range -->
                                            <div style="font-size:0.75rem; color:#666;">
                                                <i class="bi bi-thermometer-half"></i> 
                                                <strong>Rango √ìptimo:</strong> <span class="@crop.TemperatureColorClass">@crop.OptimalTempMin¬∞C - @crop.OptimalTempMax¬∞C</span>
                                                @if (currentWeather != null)
                                                {
                                                    <span class="ms-2" style="font-size:0.7rem;">
                                                    (Actual: <span class="@crop.TemperatureColorClass">@currentWeather.Main_Temp.ToString("F1")¬∞C</span>)
                                                    </span>
                                                }
                                            </div>
                                            <!-- Humidity range -->
                                            <div style="font-size:0.75rem; color:#666;">
                                                <i class="bi bi-droplet"></i> 
                                                <strong>Humedad √ìptima:</strong> <span class="@crop.HumidityColorClass">@crop.OptimalHumidityMin% - @crop.OptimalHumidityMax%</span>
                                                @if (currentWeather != null)
                                                {
                                                    <span class="ms-2" style="font-size:0.7rem;">
                                                    (Actual: <span class="@crop.HumidityColorClass">@currentWeather.Main_Humidity%</span>)
                                                    </span>
                                                }
                                            </div>
                                            <!-- Water requirement -->
                                            <div style="font-size:0.75rem; color:#666;">
                                                <i class="bi bi-moisture"></i> 
                                                <strong>Req. Agua:</strong> 
                                                <span class="@crop.WaterColorClass">
                                                    @if (crop.WaterRequirementMmPerWeek.HasValue)
                                                    {
                                                        @($"{crop.WaterRequirementMmPerWeek}mm/semana ({crop.WaterRequirementSpanish})")
                                                    }
                                                    else
                                                    {
                                                        @crop.WaterRequirementSpanish
                                                    }
                                                </span>
                                            </div>
                                            <!-- Notes (truncated) -->
                                            @if (!string.IsNullOrEmpty(crop.Notes))
                                            {
                                                <div style="font-size:0.7rem; color:#888; margin-top:0.5rem;">
                                                    @(crop.Notes.Length > 60 ? crop.Notes.Substring(0, 60) + "..." : crop.Notes)
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
@code {
    private bool showCropModal = false;
    private CropDetail? selectedCropDetail;

    private async Task ShowCropModal(string cropCode)
    {
        showCropModal = false;
        selectedCropDetail = null;
        var url = $"https://climaguate.com/data-api/rest/GetCrops?CropCode={Uri.EscapeDataString(cropCode)}";
        try
        {
            var response = await HttpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var doc = JsonDocument.Parse(json);
                var crop = doc.RootElement.GetProperty("value").EnumerateArray().FirstOrDefault();
                if (crop.ValueKind != JsonValueKind.Undefined)
                {
                    selectedCropDetail = JsonSerializer.Deserialize<CropDetail>(crop.GetRawText());
                    showCropModal = true;
                    StateHasChanged();
                }
            }
        }
        catch { }
    }

    private void CloseCropModal()
    {
        showCropModal = false;
        selectedCropDetail = null;
    }

    public class CropDetail
    {
        public string CropNameSpanish { get; set; } = "";
        public int? OptimalTempMin { get; set; }
        public int? OptimalTempMax { get; set; }
        public int? OptimalHumidityMin { get; set; }
        public int? OptimalHumidityMax { get; set; }
        public string PlantingMonthsSpanish { get; set; } = "";
        public string HarvestMonthsSpanish { get; set; } = "";
        public int? WaterRequirementMmPerWeek { get; set; }
        public string WaterRequirementSpanish { get; set; } = "";
        public int? GrowthCycleDays { get; set; }
        public string? Description { get; set; }
        public string? CropPicture { get; set; }
    }
}
                        </div>
                        
                        <!-- Detailed table for remaining crops -->
                        @if (crops.Count > 6)
                        {
                            <h6 style="color:#2B4C6F; font-size:1rem; margin-top:2rem;">Otros Cultivos</h6>
                            <div class="table-responsive" style="font-size:0.85rem; line-height:1.6;">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Cultivo</th>
                                            <th>Aptitud</th>
                                            <th>Estado</th>
                                            <th>Temporada</th>
                                            <th>Temp. √ìptima</th>
                                            <th>Humedad √ìptima</th>
                                            <th>Agua</th>
                                            <th>Notas</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var crop in crops.Skip(6))
                                        {
                                            <tr>
                                                <td>
                                                    <strong>@crop.CropNameSpanish</strong>
                                                    <br><small class="text-muted">@crop.CropNameEnglish</small>
                                                </td>
                                                <td>
                                                    <span class="badge @GetSuitabilityBadgeClass(crop.CurrentSuitabilityScore)">
                                                        @crop.CurrentSuitabilityScore%
                                                    </span>
                                                    <br><small>@GetSuitabilityText(crop.SuitabilityLabel)</small>
                                                </td>
                                                <td>
                                                    @if (crop.IsPrimary)
                                                    {
                                                        <span class="badge bg-warning text-dark">Principal</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">Secundario</span>
                                                    }
                                                </td>
                                                <td>
                                                    <span class="badge @GetSeasonBadgeClass(crop.CurrentSeasonActivity)">
                                                        @GetSeasonText(crop.CurrentSeasonActivity)
                                                    </span>
                                                </td>
                                                <td><span class="@crop.TemperatureColorClass">@crop.OptimalTempMin¬∞C - @crop.OptimalTempMax¬∞C</span></td>
                                                <td><span class="@crop.HumidityColorClass">@crop.OptimalHumidityMin% - @crop.OptimalHumidityMax%</span></td>
                                                <td>
                                                    <span class="@crop.WaterColorClass">
                                                        <small>
                                                            @if (crop.WaterRequirementMmPerWeek.HasValue)
                                                            {
                                                                @($"{crop.WaterRequirementMmPerWeek} mm/semana ({crop.WaterRequirementSpanish})")
                                                            }
                                                            else
                                                            {
                                                                @crop.WaterRequirementSpanish
                                                            }
                                                        </small>
                                                    </span>
                                                    @if (!string.IsNullOrEmpty(GetRainWarning(crop, crop.CurrentSeasonActivity)))
                                                    {
                                                        <br><span class="badge @GetRainWarningClass(crop, currentWeather)" style="font-size:0.6rem;">
                                                            @GetRainWarning(crop, crop.CurrentSeasonActivity)
                                                        </span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(crop.Notes))
                                                    {
                                                        <small>@crop.Notes</small>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    }
                    else if (!string.IsNullOrEmpty(selectedCityCode) && crops != null)
                    {
                        <div class="alert alert-info" style="font-size:0.85rem; line-height:1.6;">
                            <i class="bi bi-info-circle"></i> No hay informaci√≥n de cultivos disponible para esta ciudad.
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-primary" style="font-size:0.85rem; line-height:1.6;">
                        <i class="bi bi-info-circle"></i> Seleccione una ciudad para ver la informaci√≥n agr√≠cola disponible.
                    </div>
                }

                @if (isLoading)
                {
                    <div class="text-center" style="font-size:0.85rem; line-height:1.6;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" style="font-size:0.85rem; line-height:1.6;">
                        <i class="bi bi-exclamation-triangle"></i> @errorMessage
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title" style="color:#2B4C6F; font-size:1.1rem;">üìã Gu√≠a de Referencia</h5>
                    <button class="btn btn-link btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#collapseReferencia" aria-expanded="true" aria-controls="collapseReferencia">
                        <span class="fw-normal">Mostrar/Ocultar</span>
                    </button>
                </div>
                <hr style="border-color:#7BCDC8; border-width:2px;"/>
                <div class="collapse show" id="collapseReferencia">
                    <!-- Soil Types Reference -->
                    <h6 style="color:#2B4C6F; font-size:1rem; margin-top:1rem;">ü™® Tipos de Suelo (FAO/WRB)</h6>
                    <div class="table-responsive">
                        <table class="table table-sm table-striped" style="font-size:0.8rem;">
                            <thead style="background-color:#f8f9fa;">
                                <tr>
                                    <th>Tipo de Suelo</th>
                                    <th>Descripci√≥n</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td><strong>Andosol</strong></td>
                                    <td>Suelos j√≥venes formados a partir de cenizas volc√°nicas; muy f√©rtiles, alta capacidad de retenci√≥n de agua.</td>
                                </tr>
                                <tr>
                                    <td><strong>Fluvisol</strong></td>
                                    <td>Suelos aluviales en valles y llanuras de inundaci√≥n; ricos en sedimentos fluviales, f√©rtiles pero variables.</td>
                                </tr>
                                <tr>
                                    <td><strong>Acrisol</strong></td>
                                    <td>Suelos √°cidos, lixiviados, comunes en climas tropicales h√∫medos; baja fertilidad natural, requieren manejo.</td>
                                </tr>
                                <tr>
                                    <td><strong>Regosol</strong></td>
                                    <td>Suelos poco desarrollados (j√≥venes), en √°reas de pendientes o dep√≥sitos recientes; f√©rtiles seg√∫n el material original.</td>
                                </tr>
                                <tr>
                                    <td><strong>Cambisol</strong></td>
                                    <td>Suelos j√≥venes de desarrollo moderado; intermedios en fertilidad, comunes en √°reas de transici√≥n.</td>
                                </tr>
                                <tr>
                                    <td><strong>Leptosol</strong></td>
                                    <td>Suelos muy delgados sobre roca madre, t√≠picos de laderas escarpadas; baja capacidad agr√≠cola.</td>
                                </tr>
                                <tr>
                                    <td><strong>Luvisol</strong></td>
                                    <td>Suelos con acumulaci√≥n de arcilla, moderadamente f√©rtiles, comunes en regiones tropicales subh√∫medas.</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Climate Zones Reference -->
                    <h6 style="color:#2B4C6F; font-size:1rem; margin-top:1.5rem;">üå¶Ô∏è Zonas Clim√°ticas (K√∂ppen)</h6>
                    <div class="table-responsive">
                        <table class="table table-sm table-striped" style="font-size:0.8rem;">
                            <thead style="background-color:#f8f9fa;">
                                <tr>
                                    <th>C√≥digo</th>
                                    <th>Nombre</th>
                                    <th>Descripci√≥n</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td><strong>Aw</strong></td>
                                    <td>Sabana tropical</td>
                                    <td>Caluroso todo el a√±o, lluvias en verano, estaci√≥n seca marcada.</td>
                                </tr>
                                <tr>
                                    <td><strong>Af</strong></td>
                                    <td>Ecuatorial lluvioso</td>
                                    <td>Lluvia abundante todo el a√±o, sin estaci√≥n seca.</td>
                                </tr>
                                <tr>
                                    <td><strong>Am</strong></td>
                                    <td>Monz√≥nico tropical</td>
                                    <td>Muy lluvioso, corta estaci√≥n seca, humedad alt√≠sima.</td>
                                </tr>
                                <tr>
                                    <td><strong>Cwa</strong></td>
                                    <td>Subtropical h√∫medo con invierno seco</td>
                                    <td>Veranos c√°lidos y lluviosos, inviernos m√°s frescos y secos.</td>
                                </tr>
                                <tr>
                                    <td><strong>Cwb</strong></td>
                                    <td>Oce√°nico subtropical de altura</td>
                                    <td>Clima templado de monta√±a: veranos frescos, inviernos secos y fr√≠os.</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title" style="color:#2B4C6F; font-size:1.1rem;">Sobre el √çndice Agr√≠cola</h5>
                    <button class="btn btn-link btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#collapseIndice" aria-expanded="true" aria-controls="collapseIndice">
                        <span class="fw-normal">Mostrar/Ocultar</span>
                    </button>
                </div>
                <hr style="border-color:#7BCDC8; border-width:2px;"/>
                <div class="collapse show" id="collapseIndice" style="font-size:0.85rem; line-height:1.6;">
                    <p>
                        Esta herramienta proporciona informaci√≥n agr√≠cola espec√≠fica para diferentes regiones de Guatemala, 
                        incluyendo datos sobre cultivos recomendados basados en condiciones clim√°ticas actuales y caracter√≠sticas del suelo.
                    </p>
                    <button class="btn btn-outline-secondary btn-sm mb-2" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePuntuacion" aria-expanded="false" aria-controls="collapsePuntuacion">
                        Ver explicaci√≥n del sistema de puntuaci√≥n
                    </button>
                    <div class="collapse" id="collapsePuntuacion">
                        <div class="card card-body p-2 mt-2 mb-0" style="font-size:0.95rem;">
                            <ul>
                                <li><strong>Puntuaci√≥n Din√°mica:</strong> Calcula la aptitud en tiempo real usando datos meteorol√≥gicos actuales</li>
                                <li><strong>Algoritmo Determin√≠stico:</strong> 60% temperatura + 40% humedad con ajustes locales de microclima</li>
                                <li><strong>Rangos de Aptitud:</strong>
                                    <ul style="margin-top:0.5rem;">
                                        <li>üü¢ <strong>Excelente (85-100%):</strong> Condiciones √≥ptimas para el cultivo</li>
                                        <li>üîµ <strong>Muy Bueno (70-84%):</strong> Condiciones favorables con m√≠nimos riesgos</li>
                                        <li>üü° <strong>Regular (50-69%):</strong> Condiciones aceptables, requiere monitoreo</li>
                                        <li>üî¥ <strong>Pobre (30-49%):</strong> Condiciones sub√≥ptimas, requiere cuidados especiales</li>
                                        <li>‚ö´ <strong>Estr√©s (&lt;30%):</strong> Condiciones adversas, alto riesgo para el cultivo</li>
                                    </ul>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <h6 style="color:#2B4C6F; margin-top:1rem;">üå± Informaci√≥n de Cultivos</h6>
                    <ul>
                        <li><strong>Principal:</strong> Indica si es un cultivo econ√≥micamente importante para la regi√≥n</li>
                        <li><strong>Actividad Estacional:</strong> 
                            <ul style="margin-top:0.5rem;">
                                <li>üå± <strong>Siembra:</strong> √âpoca ideal para plantar el cultivo</li>
                                <li>üåæ <strong>Cosecha:</strong> √âpoca de recolecci√≥n del cultivo</li>
                                <li>üîß <strong>Mantenimiento:</strong> Cuidados generales (riego, fertilizaci√≥n, control de plagas)</li>
                            </ul>
                        </li>
                        <li><strong>Rangos √ìptimos:</strong> Temperatura y humedad ideales para cada cultivo</li>
                    </ul>
                    <h6 style="color:#2B4C6F; margin-top:1rem;">üó∫Ô∏è Clasificaciones Geogr√°ficas</h6>
                    <ul>
                        <li><strong>Tipos de Suelo:</strong> Clasificaci√≥n FAO/WRB (Andosol, Fluvisol, Acrisol, etc.)</li>
                        <li><strong>Zonas Clim√°ticas:</strong> Sistema K√∂ppen (Aw, Af, Am, Cwa, Cwb)</li>
                        <li><strong>Elevaci√≥n:</strong> Datos precisos de altitud para cada regi√≥n</li>
                    </ul>
                    <div class="alert alert-info mt-3" style="font-size:0.8rem;">
                        <strong>üí° Nota:</strong> Los datos se actualizan en tiempo real usando informaci√≥n meteorol√≥gica actual. 
                        Las puntuaciones pueden variar seg√∫n las condiciones clim√°ticas del momento.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<br/><br/><br/>

@code {
    private List<CityInfo>? cities;
    private List<CropInfo>? crops;
    private string selectedCityCode = "";
    private CityInfo? selectedCity;
    private WeatherInfo? currentWeather;
    private bool isLoading = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCities();
    }

    private async Task LoadCities()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            
            var response = await HttpClient.GetAsync("/data-api/rest/GetCities");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<CitiesResponse>(json);
                cities = result?.Value ?? new List<CityInfo>();
            }
            else
            {
                errorMessage = "Error al cargar las ciudades.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnCityChanged(ChangeEventArgs e)
    {
        selectedCityCode = e.Value?.ToString() ?? "";
        selectedCity = cities?.FirstOrDefault(c => c.CityCode == selectedCityCode);
        
        if (!string.IsNullOrEmpty(selectedCityCode))
        {
            await LoadCrops(selectedCityCode);
            await LoadCurrentWeather(selectedCityCode);
        }
        else
        {
            crops = null;
            currentWeather = null;
        }
    }

    private async Task LoadCrops(string cityCode)
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            
            var response = await HttpClient.GetAsync($"/data-api/rest/GetCropsByCity?CityCode={cityCode}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<CropsResponse>(json);
                crops = result?.Value ?? new List<CropInfo>();
            }
            else
            {
                errorMessage = "Error al cargar los cultivos para esta ciudad.";
                crops = new List<CropInfo>();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            crops = new List<CropInfo>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCurrentWeather(string cityCode)
    {
        try
        {
            var response = await HttpClient.GetAsync($"/data-api/rest/GetWeatherCity?CityCode={cityCode}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<WeatherResponse>(json);
                currentWeather = result?.Value?.FirstOrDefault();
            }
            else
            {
                currentWeather = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading weather: {ex.Message}");
            currentWeather = null;
        }
    }

    private string GetSuitabilityBadgeClass(int score)
    {
        return score switch
        {
            >= 85 => "bg-success",      // Green for Excellent
            >= 70 => "bg-info",         // Teal for Very Good
            >= 50 => "bg-warning",      // Yellow for Fair
            >= 30 => "bg-danger",       // Red for Poor
            _ => "bg-dark"              // Black for Stress
        };
    }

    private string GetCardBorderClass(int score)
    {
        return score switch
        {
            >= 85 => "border-success",      // Green for Excellent
            >= 70 => "border-info",         // Teal for Very Good  
            >= 50 => "border-warning",      // Yellow for Fair
            >= 30 => "border-danger",       // Red for Poor
            _ => "border-dark"              // Black for Stress
        };
    }

    private string GetSuitabilityDotClass(string label)
    {
        return label switch
        {
            "EXCELLENT" => "text-success",      // Green üü¢
            "VERY_GOOD" => "text-info",         // Teal/Cyan üîµ  
            "FAIR" => "text-warning",           // Yellow/Orange üü°
            "POOR" => "text-danger",            // Red üî¥
            "STRESS" => "text-dark",            // Black ‚ö´
            _ => "text-muted"
        };
    }

    private string GetScoreColor(int score)
    {
        return score switch
        {
            >= 85 => "#198754",  // Bootstrap success green
            >= 70 => "#0d6efd",  // Bootstrap primary blue
            >= 50 => "#EF6C00",  // Custom orange for better contrast
            >= 30 => "#dc3545",  // Bootstrap danger red
            _ => "#212529"       // Bootstrap dark
        };
    }

    private string GetSuitabilityText(string label)
    {
        return label switch
        {
            "EXCELLENT" => "Excelente",
            "VERY_GOOD" => "Muy Bueno",
            "FAIR" => "Aceptable",
            "POOR" => "Pobre",
            "STRESS" => "Estr√©s",
            _ => "Desconocido"
        };
    }

    private string GetSeasonBadgeClass(string activity)
    {
        return activity switch
        {
            "PLANTING" => "bg-success",
            "HARVEST" => "bg-warning text-dark",
            "MAINTENANCE" => "bg-info text-dark",
            _ => "bg-light text-dark"
        };
    }

    private string GetSeasonText(string activity)
    {
        return activity switch
        {
            "PLANTING" => "üå± Siembra",
            "HARVEST" => "üåæ Cosecha", 
            "MAINTENANCE" => "üîß Mantenimiento",
            _ => "üìÖ Variable"
        };
    }

    private string GetSeasonDisplay(string plantingMonths, string harvestMonths)
    {
        // For now, return a simple display. Could be enhanced to parse JSON and show month names
        return !string.IsNullOrEmpty(plantingMonths) ? "Variable" : "Todo el a√±o";
    }

    private string GetSoilTypeDescription(string soilType)
    {
        return soilType switch
        {
            "Andosol" => "Andosol - Suelos volc√°nicos muy f√©rtiles",
            "Fluvisol" => "Fluvisol - Suelos aluviales de valles",
            "Acrisol" => "Acrisol - Suelos √°cidos tropicales",
            "Regosol" => "Regosol - Suelos j√≥venes poco desarrollados", 
            "Cambisol" => "Cambisol - Suelos de desarrollo moderado",
            "Leptosol" => "Leptosol - Suelos delgados sobre roca",
            "Luvisol" => "Luvisol - Suelos con acumulaci√≥n de arcilla",
            _ => $"{soilType} - Tipo de suelo especializado"
        };
    }

    private string GetClimateDescription(string climateZone)
    {
        return climateZone switch
        {
            "Aw" => "Aw - Sabana tropical (lluvias estacionales)",
            "Af" => "Af - Ecuatorial lluvioso (lluvia constante)",
            "Am" => "Am - Monz√≥nico tropical (muy lluvioso)",
            "Cwa" => "Cwa - Subtropical h√∫medo (invierno seco)",
            "Cwb" => "Cwb - Oce√°nico subtropical de altura (templado de monta√±a)",
            _ => $"{climateZone} - Zona clim√°tica especializada"
        };
    }

    // =============================================================================
    // RAIN WARNING SYSTEM METHODS
    // =============================================================================

    /// <summary>
    /// Get rain warning message for a specific crop based on rain data in crop object
    /// </summary>
    private string GetRainWarning(CropInfo crop, string season)
    {
        // Use water status from stored procedure - ONLY humidity-based, no rain
        return crop.WaterStatus switch
        {
            "HIGH_HUMIDITY" => season switch
            {
                "PLANTING" => "Humedad alta - eval√∫e necesidad de riego",
                "HARVEST" => "Humedad alta - condiciones favorables",
                "MAINTENANCE" => "Humedad alta - riego no urgente",
                _ => "Humedad alta - monitoree"
            },
            "LOW_HUMIDITY" => season switch
            {
                "PLANTING" => "Humedad baja - riego urgente para siembra",
                "HARVEST" => "Humedad baja - riego necesario",
                "MAINTENANCE" => "Humedad baja - riego inmediato",
                _ => "Humedad baja - riego urgente"
            },
            "OPTIMAL_HUMIDITY" => season switch
            {
                "PLANTING" => "Humedad √≥ptima - riego seg√∫n cronograma",
                "HARVEST" => "Humedad √≥ptima - condiciones buenas",
                "MAINTENANCE" => "Humedad √≥ptima - riego regular",
                _ => "Humedad √≥ptima - condiciones buenas"
            },
            _ => ""
        };
    }

    /// <summary>
    /// Get CSS class for rain warning badge
    /// </summary>
    private string GetRainWarningClass(CropInfo crop, WeatherInfo? weather)
    {
        return crop.WaterStatus switch
        {
            "HIGH_HUMIDITY" => "bg-info text-white",
            "LOW_HUMIDITY" => "bg-danger text-white", 
            "OPTIMAL_HUMIDITY" => "bg-success text-white",
            _ => "bg-light text-dark"
        };
    }

    /// <summary>
    /// Parse rain value from string (handles "n/a" and numeric values)
    /// </summary>
    private double ParseRainValue(string rainValue)
    {
        if (string.IsNullOrWhiteSpace(rainValue) || rainValue.Trim().ToLower() == "n/a")
            return 0.0;
        
        // Try to parse as double, return 0 if failed
        if (double.TryParse(rainValue.Trim(), out double result))
            return result;
        
        return 0.0;
    }

    /// <summary>
    /// Get water requirement description for display
    /// </summary>
    private string GetWaterRequirementText(CropInfo crop)
    {
        if (crop.WaterRequirementMmPerWeek.HasValue)
        {
            var spanishRequirement = GetSpanishWaterRequirement(crop.WaterRequirement);
            return $"{crop.WaterRequirementMmPerWeek}mm/semana ({spanishRequirement})";
        }
        return GetSpanishWaterRequirement(crop.WaterRequirement);
    }

    /// <summary>
    /// Convert English water requirement to Spanish
    /// </summary>
    private string GetSpanishWaterRequirement(string? requirement)
    {
        return requirement?.ToLower() switch
        {
            "low" => "Bajo",
            "medium" => "Medio", 
            "high" => "Alto",
            "very high" => "Muy Alto",
            _ => requirement ?? "N/A"
        };
    }

    // Data models
    public class CitiesResponse
    {
        [JsonPropertyName("value")]
        public List<CityInfo> Value { get; set; } = new();
    }

    public class CropsResponse
    {
        [JsonPropertyName("value")]
        public List<CropInfo> Value { get; set; } = new();
    }

    public class WeatherResponse
    {
        [JsonPropertyName("value")]
        public List<WeatherInfo> Value { get; set; } = new();
    }

    public class CityInfo
    {
        [JsonPropertyName("CityCode")]
        public string CityCode { get; set; } = "";

        [JsonPropertyName("CityName")]
        public string CityName { get; set; } = "";

        [JsonPropertyName("ElevationMeters")]
        public int ElevationMeters { get; set; }

        [JsonPropertyName("SoilType")]
        public string SoilType { get; set; } = "";

        [JsonPropertyName("ClimateZone")]
        public string ClimateZone { get; set; } = "";
    }



    public class CropInfo
    {
        [JsonPropertyName("CropCode")]
        public string CropCode { get; set; } = "";
        [JsonPropertyName("CityCode")]
        public string CityCode { get; set; } = "";
        [JsonPropertyName("CityName")]
        public string CityName { get; set; } = "";
        [JsonPropertyName("ElevationMeters")]
        public int ElevationMeters { get; set; }
        [JsonPropertyName("SoilType")]
        public string SoilType { get; set; } = "";
        [JsonPropertyName("ClimateZone")]
        public string ClimateZone { get; set; } = "";
        [JsonPropertyName("CropNameSpanish")]
        public string CropNameSpanish { get; set; } = "";
        [JsonPropertyName("CropNameEnglish")]
        public string CropNameEnglish { get; set; } = "";
        [JsonPropertyName("StaticSuitabilityScore")]
        public int StaticSuitabilityScore { get; set; }
        [JsonPropertyName("CurrentSuitabilityScore")]
        public int CurrentSuitabilityScore { get; set; }
        [JsonPropertyName("SuitabilityLabel")]
        public string SuitabilityLabel { get; set; } = "";
        [JsonPropertyName("CurrentSeasonActivity")]
        public string CurrentSeasonActivity { get; set; } = "";
        [JsonPropertyName("IsPrimary")]
        public bool IsPrimary { get; set; }
        [JsonPropertyName("OptimalTempMin")]
        public float OptimalTempMin { get; set; }
        [JsonPropertyName("OptimalTempMax")]
        public float OptimalTempMax { get; set; }
        [JsonPropertyName("StressTempMin")]
        public float StressTempMin { get; set; }
        [JsonPropertyName("StressTempMax")]
        public float StressTempMax { get; set; }
        [JsonPropertyName("OptimalHumidityMin")]
        public int OptimalHumidityMin { get; set; }
        [JsonPropertyName("OptimalHumidityMax")]
        public int OptimalHumidityMax { get; set; }
        [JsonPropertyName("PlantingMonths")]
        public string PlantingMonths { get; set; } = "";
        [JsonPropertyName("HarvestMonths")]
        public string HarvestMonths { get; set; } = "";
        [JsonPropertyName("WaterRequirement")]
        public string WaterRequirement { get; set; } = "";
        [JsonPropertyName("WaterRequirementMmPerWeek")]
        public int? WaterRequirementMmPerWeek { get; set; }
        [JsonPropertyName("WaterRequirementSpanish")]
        public string WaterRequirementSpanish { get; set; } = "";
        [JsonPropertyName("TemperatureColorClass")]
        public string TemperatureColorClass { get; set; } = "";
        [JsonPropertyName("HumidityColorClass")]
        public string HumidityColorClass { get; set; } = "";
        [JsonPropertyName("WaterColorClass")]
        public string WaterColorClass { get; set; } = "";
        [JsonPropertyName("Rain_1h")]
        public string Rain_1h { get; set; } = "";
        [JsonPropertyName("Rain_3h")]
        public string Rain_3h { get; set; } = "";
        [JsonPropertyName("WaterStatus")]
        public string WaterStatus { get; set; } = "";
        [JsonPropertyName("Notes")]
        public string Notes { get; set; } = "";
        // Legacy property for backward compatibility
        [JsonPropertyName("SuitabilityScore")]
        public int SuitabilityScore 
        { 
            get { return this.CurrentSuitabilityScore; }
            set { this.CurrentSuitabilityScore = value; }
        }
    }

    public class WeatherInfo
    {
        [JsonPropertyName("Name")]
        public string Name { get; set; } = "";
        [JsonPropertyName("Main_Temp")]
        public float Main_Temp { get; set; }
        [JsonPropertyName("Main_Humidity")]
        public int Main_Humidity { get; set; }
        [JsonPropertyName("Rain_1h")]
        public string Rain_1h { get; set; } = "";
        [JsonPropertyName("Weather_Description")]
        public string Weather_Description { get; set; } = "";
        // Add other properties as needed
    }


        [JsonPropertyName("Main_Humidity")]
        public int Main_Humidity { get; set; }

        [JsonPropertyName("Main_Feels_Like")]
        public double Main_Feels_Like { get; set; }

        [JsonPropertyName("Rain_1h")]
        public string Rain_1h { get; set; } = "";

        [JsonPropertyName("Rain_3h")]
        public string Rain_3h { get; set; } = "";
    }
}
