@page "/weather-history"
@using System.Globalization
@inject HttpClient Http

<PageTitle>Histórico de Clima - Climaguate</PageTitle>
<img src="/images/logo.png" alt="logo" style="height:140px" />
<hr/>

<style>
    .weather-table {
        font-size: 0.75rem;
    }

    .weather-table th, .weather-table td {
        border: 1px solid #a8a8a8;
        padding: 5px;
        text-align: left;
    }

    .weather-table th {
        background-color: #f0f0f0;
    }

    .retry-button {
        background-color: #1976D2;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: background-color 0.2s;
    }

    .retry-button:hover {
        background-color: #1565C0;
    }

    .retry-button:active {
        background-color: #0D47A1;
    }

    .form-control {
        font-size: 0.9rem;
    }

    .form-label {
        font-weight: 500;
        font-size: 0.9rem;
    }
</style>

<h3>Histórico de Clima</h3>

<div class="mb-3">
    <label class="form-label">Ciudad:</label>
    <select class="form-control" style="width: auto; display: inline-block;" @bind="selectedCity">
        @foreach (var city in cities)
        {
            <option value="@city.CityCode">@city.CityName</option>
        }
    </select>
    <label class="form-label ms-3">Días:</label>
    <input type="number" class="form-control" style="width: 80px; display: inline-block;" min="1" max="60" @bind="days" />
    <button class="btn retry-button ms-3" @onclick="LoadHistory">Ver historial</button>
</div>

@if (weatherHistory != null)
{
    <table class="table weather-table table-bordered">
        <thead>
            <tr>
                <th>Fecha</th>
                <th>Humedad (%)</th>
                <th>Lluvia 1h (mm)</th>
                <th>Lluvia 3h (mm)</th>
                <th>Temp (°C)</th>
                <th>Presión (hPa)</th>
                <th>Saturación estimada</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var row in weatherHistory)
            {
                <tr>
                    <td>@row.CollectionDate.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@row.Main_Humidity</td>
                    <td>@row.Rain_1h</td>
                    <td>@row.Rain_3h</td>
                    <td>@row.Main_Temp</td>
                    <td>@row.Main_Pressure</td>
                    <td>@EstimateSaturation(row)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public class WeatherHistoryRow
    {
        public DateTime CollectionDate { get; set; }
        public int Main_Humidity { get; set; }
        public string Rain_1h { get; set; }
        public string Rain_3h { get; set; }
        public double Main_Temp { get; set; }
        public int Main_Pressure { get; set; }
    }

    public class City
    {
        public string CityCode { get; set; }
        public string CityName { get; set; }
    }

    public class GetWeatherHistoryResponse
    {
        public List<WeatherHistoryRow> value { get; set; }
    }

    public class GetCitiesResponse
    {
        public List<CityApiResponse> value { get; set; }
    }

    public class CityApiResponse
    {
        public string CityCode { get; set; }
        public string CityName { get; set; }
    }

    private List<City> cities = new();
    private string selectedCity = "GUA";
    private int days = 7;
    private List<WeatherHistoryRow> weatherHistory;

    protected override async Task OnInitializedAsync()
    {
        // Load cities from the existing API
        try
        {
            var citiesResponse = await Http.GetFromJsonAsync<GetCitiesResponse>("/data-api/rest/GetCities");
            if (citiesResponse?.value != null)
            {
                cities = citiesResponse.value.Select(c => new City 
                { 
                    CityCode = c.CityCode, 
                    CityName = c.CityName 
                }).ToList();
            }
        }
        catch
        {
            // Fallback to static list if API fails
            cities = new List<City> {
                new City { CityCode = "GUA", CityName = "Ciudad de Guatemala" },
                new City { CityCode = "QRO", CityName = "Quetzaltenango" },
                new City { CityCode = "ESC", CityName = "Escuintla" }
            };
        }
    }

    private async Task LoadHistory()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<GetWeatherHistoryResponse>($"/data-api/rest/GetWeatherHistory?CityCode={selectedCity}&Days={days}");
            weatherHistory = response?.value ?? new List<WeatherHistoryRow>();
        }
        catch (Exception ex)
        {
            // Handle error - could show a message to user
            weatherHistory = new List<WeatherHistoryRow>();
        }
    }

    private string EstimateSaturation(WeatherHistoryRow row)
    {
        // Simple estimate: if humidity > 90% and rain > 10mm, mark as "Alta"
        double rain = double.TryParse(row.Rain_1h, NumberStyles.Any, CultureInfo.InvariantCulture, out var r1) ? r1 : 0;
        if (row.Main_Humidity > 90 && rain > 10)
            return "Alta";
        if (row.Main_Humidity > 80 && rain > 5)
            return "Media";
        return "Baja";
    }
}
