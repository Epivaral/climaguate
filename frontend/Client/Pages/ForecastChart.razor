@using System.Net.Http.Json
@inject HttpClient HttpClient

@code {
    [Parameter]
    public string CityCode { get; set; } = "GUA";
}


<div class="forecast-chart-container forecast-matching-box" style="max-width: 420px; margin: 0 auto;">
    <h4 style="font-family: inherit;">Pron贸stico pr贸ximas 6 horas</h4>
    @if (isLoading)
    {
        <div>Cargando pron贸stico...</div>
    }
    else if (forecastData != null && forecastData.Count > 0)
    {
        <canvas id="precipChart" width="360" height="144"></canvas>
        <div class="forecast-legend-row">
            <strong style="font-size: 1rem;">Siguientes horas:</strong>
            <div class="legend-items">
                @foreach (var item in forecastData.OrderBy(f => f.EffectiveDate))
                {
                    <span class="legend-item"><b>@item.EffectiveDate.ToString("HH:mm")</b> - @item.IconPhrase, probabilidad de lluvia: @item.PrecipitationProbability% @item.PrecipitationIntensity @((item.TotalLiquid.HasValue ? $"({item.TotalLiquid:F1} mm)" : ""))</span>
                }
            </div>
        </div>
    }
    else
    {
        <div>No hay datos de pron贸stico.</div>
    }
</div>


@code {
    private List<WeatherForecast> forecastData = new();
    private bool isLoading = true;
    private bool chartNeedsRender = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadForecastData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadForecastData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (chartNeedsRender && forecastData != null && forecastData.Count > 0)
        {
            await DrawChart();
            chartNeedsRender = false;
        }
    }

    private class WeatherForecastResponse
    {
        public List<WeatherForecast>? Value { get; set; }
    }

    private async Task LoadForecastData()
    {
        isLoading = true;
        try
        {
            var response = await HttpClient.GetFromJsonAsync<WeatherForecastResponse>($"/data-api/rest/GetWeatherForecast?CityCode={CityCode}");
            forecastData = response?.Value ?? new List<WeatherForecast>();
        }
        catch { forecastData = new(); }
        isLoading = false;
        chartNeedsRender = forecastData != null && forecastData.Count > 0;
    }

    private async Task DrawChart()
    {
        if (forecastData == null || forecastData.Count == 0)
            return;
        var labels = forecastData.Select(f => f.EffectiveDate.ToString("HH:mm")).ToArray();
        var precipitation = forecastData.Select(f => f.TotalLiquid ?? 0).ToArray();
        var minTemps = forecastData.Select(f => f.TemperatureMin ?? 0).ToArray();
        var maxTemps = forecastData.Select(f => f.TemperatureMax ?? 0).ToArray();
        if (JS != null)
            await JS.InvokeVoidAsync("drawForecastChart", labels, precipitation, minTemps, maxTemps);
    }

    [Inject] IJSRuntime? JS { get; set; }

    public class WeatherForecast
    {
        public DateTime ForecastDate { get; set; }
        public DateTime EffectiveDate { get; set; }
        public string? Phrase { get; set; }
        public string? IconPhrase { get; set; }
        public double? TotalLiquid { get; set; }
        public double? TemperatureMin { get; set; }
        public double? TemperatureMax { get; set; }
        public int? PrecipitationProbability { get; set; }
        public string? PrecipitationIntensity { get; set; }
    }
}
