@page "/"
@inject HttpClient HttpClient
@using System.Text.Json
@using System.Text.Json.Serialization

<PageTitle>Home</PageTitle>
<img src="/images/logo.png" alt="logo" style="height:140px" />
<hr/>

<style>
    .current-weather {
        padding: 20px;
        border-radius: 10px;
        border: 1px solid #a8a8a8;
    }

    .current-weather td {
        padding: 1px;
        vertical-align: middle;
        text-align: left;
        font-size: 0.8rem;
    }

    .weather-table img {
        width: 50px;
        height: 50px;
    }

    .current-weather ul {
        list-style-type: none;
        padding-left: 0;
    }

    .current-weather ul li {
        margin-bottom: 5px;
    }

    .weather-table {
        font-size: 0.75rem;
    }

    .weather-table th, .weather-table td {
        border: 1px solid #a8a8a8;
        padding: 5px;
        text-align: left;
    }

    .weather-table th {
        background-color: #f0f0f0;
    }

    /* Spinner CSS moved to app.css for compatibility */
</style>

<div>
    Selecciona tu ciudad:
    @if (isLoadingCities)
    {
       <div style="text-align:center; margin:20px;">
    <svg class="loading-progress" width="32" height="32" viewBox="0 0 32 32">
        <!-- Grey background circle -->
        <circle cx="16" cy="16" r="11" stroke="#e0e0e0" stroke-width="1" fill="none" />
        <g>
            <animateTransform
                attributeName="transform"
                type="rotate"
                from="0 16 16"
                to="360 16 16"
                dur="1s"
                repeatCount="indefinite" />
            <!-- Only a partial blue arc, not a full ring -->
            <circle
                cx="16"
                cy="16"
                r="11"
                stroke="#1b6ec2"
                stroke-width="1"
                fill="none"
                stroke-dasharray="17 52"
                stroke-dashoffset="60"
                stroke-linecap="round"
                transform="rotate(-90 16 16)" />
        </g>
    </svg>
    <div>Cargando ciudades...</div>
</div>

    }
    else
    {
        <select id="citySelector" @onchange="OnCityChanged">
            <option value="GUA">Ciudad de Guatemala</option>
            @foreach (var city in cities)
            {
                <option value="@city.CityCode">@city.CityName</option>
            }
        </select>
    }
</div>
<br/>

    @if (weatherData != null && weatherData.Count > 0)
    {
        var currentWeather = weatherData.First(); 
        <div class="current-weather" style="background-image: linear-gradient(to bottom, @currentWeather.Start_Color, @currentWeather.End_Color);">
                Condiciones para <strong>@currentWeather.Name</strong><br/>
                <em>Ultima lectura: @currentWeather.CollectionDate.ToString("yyyy-MM-dd hh:mm tt")</em>
                <br/>
                <table>
                <tr>
                    <td>
                        <div style="border-radius:10px;border: 1px solid #afafaf; padding:10px; vertical-align: middle; text-align: center;">
                            <img src="/images/icons/@currentWeather.Weather_Icon" alt="Icon" /><br/>
                            <strong>@currentWeather.Weather_Description</strong> 
                        </div>
                    </td>
                    <td style="padding:10px;text-align: left;">
                    <br/>
                    <ul>
                        <li><strong>Temperatura:</strong> @currentWeather.Main_Temp °C</li>
                        <li><strong>Sensación Térmica:</strong> @currentWeather.Main_Feels_Like °C</li>
                        <li><strong>Presión:</strong> @currentWeather.Main_Pressure hPa</li>
                        <li><strong>Visibilidad:</strong> @currentWeather.Visibility m</li>
                        <li><strong>Nubosidad:</strong> @currentWeather.Clouds_All%</li>
                        <li><strong>Lluvia (1h):</strong> @currentWeather.Rain_1h mm</li>
                    </ul>
                    </td>
                </tr>
                </table>
        </div>
        <br/>
        <div class="current-weather" style="background-image: linear-gradient(to bottom, #FDB949, #ffe1c3);">
            <table>
                <tr>Info <strong>@currentWeather.Name</strong></tr>
                <tr style="text-align: left; padding: 0px;">
                    <td><img src="/images/icons/tlow.png" alt="temp low" style="height:60px;" />@currentWeather.Main_Temp_Min °C</td>
                    <td><img src="/images/icons/thigh.png" alt="temp high" style="height:60px;" />@currentWeather.Main_Temp_Max °C</td>
                </tr>
                <tr style="text-align: left; padding: 0px;">
                    <td><img src="/images/icons/humidity.png" alt="humidity" style="height:60px;" />@currentWeather.Main_Humidity%</td>
                    <td><img src="/images/icons/wind.png" alt="wind" style="height:50px;" />@currentWeather.Wind_Speed m/s | @currentWeather.Wind_Deg°</td>
                </tr>
                <tr style="text-align: left; padding: 0px;">
                    <td><img src="/images/icons/sunrise.png" alt="sunrise" style="height:60px;" />@currentWeather.SunriseDate.ToString("hh:mm tt")</td>
                    <td><img src="/images/icons/sunset.png" alt="sunset" style="height:60px;" />@currentWeather.SunsetDate.ToString("hh:mm tt")</td>
                </tr>
            </table>
        </div>
    }
    else
    {
        <p><em>Cargando informacion...</em></p>
    }
<br/>


@if (weatherData != null && weatherData.Count > 1)
{
    <ForecastChart CityCode="@selectedCityCode" />
    <strong>Imagen satelital humedad</strong>
    <br/>
    <img class="satellite-img" src="https://imagefilesclimaguate.blob.core.windows.net/mapimages/@selectedCityCode/animation.png" alt="Map"/>
    <br/>
    <br/>

    <div class="weather-table">
        <strong>Lecturas previas</strong>
        <hr/>
        <table>
            <thead>
                <tr>
                    <th>Fecha lectura</th>
                    <th>Resumen Clima</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var weather in weatherData.Skip(1)) // Skip first item
                {
                    <tr>
                        <td>@weather.CollectionDate.ToString("yyyy-MM-dd hh:mm tt")</td>
                        <td>
                            <img src="/images/icons/@weather.Weather_Icon" alt="Icon" /> @weather.Weather_Description | @weather.Main_Temp °C
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <br/>
    <br/>
    <br/>
}

@code {
    private List<City> cities = new List<City>();
    private List<Weather> weatherData = new List<Weather>();
    private string selectedCityCode = "GUA";
    private bool isLoadingCities = false;

    protected override async Task OnInitializedAsync()
    {
        isLoadingCities = true;
        cities = await GetCitiesAsync();
        isLoadingCities = false;
        await GetWeatherDataAsync(selectedCityCode);
    }

    private async Task<List<City>> GetCitiesAsync()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<ApiResponse>("/data-api/rest/GetCities");
            return response?.Value ?? new List<City>();
        }
        catch
        {
            return new List<City>();
        }
    }

    private async Task GetWeatherDataAsync(string cityCode)
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<WeatherResponse>($"/data-api/rest/GetWeatherCity?CityCode={cityCode}");
            weatherData = response?.Value ?? new List<Weather>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching weather data: {ex.Message}");
            weatherData = new List<Weather>(); 
        }
    }

    private async Task OnCityChanged(ChangeEventArgs e)
    {
        selectedCityCode = e.Value?.ToString() ?? "GUA";
        await GetWeatherDataAsync(selectedCityCode);
    }

    public class ApiResponse
    {
        public List<City>? Value { get; set; }
    }

    public class City
    {
        public string? CityCode { get; set; }
        public string? CityName { get; set; }
    }

    public class WeatherResponse
    {
        public List<Weather>? Value { get; set; }
    }

    public class Weather
    {   
        public string? Name { get; set; }
        public string? Weather_Description { get; set; }
        public string? Weather_Icon { get; set; }
        public double Main_Temp { get; set; }
        public double Main_Feels_Like { get; set; }
        public int Main_Pressure { get; set; }
        public int Main_Humidity { get; set; }
        public double Main_Temp_Min { get; set; }
        public double Main_Temp_Max { get; set; }
        public int? Main_Sea_Level { get; set; }
        public int? Main_Grnd_Level { get; set; }
        public string? Visibility { get; set; }
        public double Wind_Speed { get; set; }
        public int Wind_Deg { get; set; }
        public double? Wind_Gust { get; set; }
        public int Clouds_All { get; set; }
        public string? Rain_1h { get; set; }
        public string? Rain_3h { get; set; }
        public DateTime CollectionDate { get; set; }
        public DateTime SunriseDate { get; set; }
        public DateTime SunsetDate { get; set; }
        public string? Start_Color { get; set; }
        public string? End_Color { get; set; }
    }
}
