@page "/"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using BlazorApp.Client
@inject HttpClient HttpClient

<div class="container-fluid p-0">
    <!-- Header Section -->
    <div class="hero-section text-center text-white py-5" style="background: linear-gradient(135deg, #1976D2 0%, #42A5F5 100%);">
        <div class="container">
            <img src="images/chaac.png" alt="Chaac" class="logo mb-3" style="height: 80px;">
            <h1 class="display-4 fw-bold mb-3">Climaguate</h1>
            <p class="lead mb-4">Datos meteorol√≥gicos en tiempo real para Guatemala</p>
        </div>
    </div>

    <!-- Main Content -->
    <div class="container my-5">
        <!-- City Selection -->
        <div class="row justify-content-center mb-4">
            <div class="col-md-6">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title text-center mb-3">Selecciona una ciudad</h5>
                        <select class="form-select form-select-lg" @onchange="OnCityChanged" value="@selectedCityCode">
                            <option value="">-- Selecciona una ciudad --</option>
                            @if (cities != null)
                            {
                                @foreach (var city in cities)
                                {
                                    <option value="@city.Code">@city.Name</option>
                                }
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- Weather Data -->
        @if (!string.IsNullOrEmpty(selectedCityCode))
        {
            <div class="row">
                <!-- Current Weather Card -->
                <div class="col-lg-6 mb-4">
                    <div class="card shadow h-100">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">üå§Ô∏è Clima Actual</h5>
                        </div>
                        <div class="card-body">
                            @if (isLoading)
                            {
                                <div class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Cargando...</span>
                                    </div>
                                    <p class="mt-2">Obteniendo datos del clima...</p>
                                </div>
                            }
                            else if (weather != null)
                            {
                                <div class="weather-info">
                                    <div class="d-flex align-items-center mb-3">
                                        <img src="images/icons/@(weather.Weather_Icon).png" alt="@weather.Weather_Description" class="weather-icon me-3" style="width: 64px; height: 64px;">
                                        <div>
                                            <h3 class="mb-0">@($"{weather.Main_Temp:F1}")¬∞C</h3>
                                            <p class="text-muted mb-0">@weather.Weather_Description</p>
                                        </div>
                                    </div>
                                    
                                    <div class="row g-3">
                                        <div class="col-6">
                                            <div class="stat-item">
                                                <small class="text-muted">Se siente como</small>
                                                <div>@($"{weather.Main_Feels_Like:F1}")¬∞C</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="stat-item">
                                                <small class="text-muted">Humedad</small>
                                                <div>@weather.Main_Humidity%</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="stat-item">
                                                <small class="text-muted">Presi√≥n</small>
                                                <div>@weather.Main_Pressure hPa</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="stat-item">
                                                <small class="text-muted">Viento</small>
                                                <div>@($"{weather.Wind_Speed:F1}") m/s</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-warning">
                                    No hay datos disponibles para esta ciudad.
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Air Quality Card -->
                <div class="col-lg-6 mb-4">
                    <div class="card shadow h-100">
                        <div class="card-header bg-success text-white">
                            <h5 class="mb-0">üåç Calidad del Aire</h5>
                        </div>
                        <div class="card-body">
                            @if (isLoadingPollution)
                            {
                                <div class="text-center">
                                    <div class="spinner-border text-success" role="status">
                                        <span class="visually-hidden">Cargando...</span>
                                    </div>
                                    <p class="mt-2">Obteniendo datos de calidad del aire...</p>
                                </div>
                            }
                            else if (pollutionData != null)
                            {
                                <div class="air-quality-info">
                                    <!-- AQI Badge -->
                                    <div class="text-center mb-4">
                                        <div class="aqi-badge p-3 rounded-3 text-white fw-bold" style="background: @GetAqiGradient(pollutionData.aqi);">
                                            <div class="h4 mb-1">AQI @pollutionData.aqi</div>
                                            <div class="small">@GetAqiLabel(pollutionData.aqi)</div>
                                        </div>
                                    </div>

                                    <!-- Pollutants Grid -->
                                    <div class="row g-2">
                                        <div class="col-6">
                                            <div class="pollutant-card p-2 bg-light rounded">
                                                <div class="small text-muted">CO</div>
                                                <div class="fw-bold">@($"{pollutionData.co:F1}") Œºg/m¬≥</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="pollutant-card p-2 bg-light rounded">
                                                <div class="small text-muted">NO</div>
                                                <div class="fw-bold">@($"{pollutionData.no:F1}") Œºg/m¬≥</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="pollutant-card p-2 bg-light rounded">
                                                <div class="small text-muted">NO‚ÇÇ</div>
                                                <div class="fw-bold">@($"{pollutionData.no2:F1}") Œºg/m¬≥</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="pollutant-card p-2 bg-light rounded">
                                                <div class="small text-muted">O‚ÇÉ</div>
                                                <div class="fw-bold">@($"{pollutionData.o3:F1}") Œºg/m¬≥</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="pollutant-card p-2 bg-light rounded">
                                                <div class="small text-muted">SO‚ÇÇ</div>
                                                <div class="fw-bold">@($"{pollutionData.so2:F1}") Œºg/m¬≥</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="pollutant-card p-2 bg-light rounded">
                                                <div class="small text-muted">PM2.5</div>
                                                <div class="fw-bold">@($"{pollutionData.pm2_5:F1}") Œºg/m¬≥</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="pollutant-card p-2 bg-light rounded">
                                                <div class="small text-muted">PM10</div>
                                                <div class="fw-bold">@($"{pollutionData.pm10:F1}") Œºg/m¬≥</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="pollutant-card p-2 bg-light rounded">
                                                <div class="small text-muted">NH‚ÇÉ</div>
                                                <div class="fw-bold">@($"{pollutionData.nh3:F1}") Œºg/m¬≥</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info">
                                    <i class="bi bi-info-circle me-2"></i>
                                    No hay datos de calidad del aire disponibles para esta ciudad.
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Forecast Chart -->
            <div class="row">
                <div class="col-12">
                    <div class="card shadow">
                        <div class="card-header bg-info text-white">
                            <h5 class="mb-0">üìä Pron√≥stico Extendido</h5>
                        </div>
                        <div class="card-body">
                            <p class="text-center text-muted">Gr√°fico de pron√≥stico pr√≥ximamente...</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .hero-section {
        min-height: 300px;
        display: flex;
        align-items: center;
    }

    .logo {
        filter: drop-shadow(0 4px 8px rgba(0,0,0,0.3));
    }

    .weather-icon {
        filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));
    }

    .stat-item {
        text-align: center;
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 0.5rem;
    }

    .stat-item small {
        display: block;
        font-size: 0.75rem;
        margin-bottom: 0.25rem;
    }

    .stat-item div {
        font-size: 1.1rem;
        font-weight: 600;
        color: #495057;
    }

    .aqi-badge {
        display: inline-block;
        min-width: 120px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .pollutant-card {
        transition: transform 0.2s ease;
    }

    .pollutant-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .air-quality-info {
        text-align: center;
    }

    .card {
        border: none;
        transition: transform 0.2s ease;
    }

    .card:hover {
        transform: translateY(-2px);
    }

    .form-select-lg {
        border-radius: 0.5rem;
        border: 2px solid #e9ecef;
        transition: border-color 0.2s ease;
    }

    .form-select-lg:focus {
        border-color: #1976D2;
        box-shadow: 0 0 0 0.2rem rgba(25, 118, 210, 0.25);
    }
</style>

@code {
    private List<City>? cities;
    private Weather? weather;
    private AirQuality? pollutionData;
    private string selectedCityCode = "";
    private bool isLoading = false;
    private bool isLoadingPollution = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCities();
    }

    private async Task LoadCities()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<ApiResponse>("/data-api/rest/City");
            cities = response?.Value ?? new List<City>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cities: {ex.Message}");
            cities = new List<City>();
        }
    }

    private async Task OnCityChanged(ChangeEventArgs e)
    {
        selectedCityCode = e.Value?.ToString() ?? "";
        
        if (!string.IsNullOrEmpty(selectedCityCode))
        {
            await LoadWeatherData();
            await GetPollutionDataAsync(selectedCityCode);
        }
        else
        {
            weather = null;
            pollutionData = null;
        }
    }

    private async Task LoadWeatherData()
    {
        isLoading = true;
        try
        {
            var response = await HttpClient.GetFromJsonAsync<WeatherResponse>($"/data-api/rest/GetLatestWeather?CityCode={selectedCityCode}");
            weather = response?.Value?.FirstOrDefault();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading weather: {ex.Message}");
            weather = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetAqiLabel(int aqi)
    {
        return aqi switch
        {
            1 => "Buena",
            2 => "Moderada", 
            3 => "Poco saludable para grupos sensibles",
            4 => "Poco saludable",
            5 => "Muy poco saludable",
            _ => "Desconocido"
        };
    }

    private string GetAqiGradient(int aqi)
    {
        return aqi switch
        {
            1 => "linear-gradient(135deg, #4CAF50, #66BB6A)", // Good - Green
            2 => "linear-gradient(135deg, #FFEB3B, #FFF176)", // Fair - Yellow
            3 => "linear-gradient(135deg, #FF9800, #FFB74D)", // Moderate - Orange
            4 => "linear-gradient(135deg, #F44336, #EF5350)", // Poor - Red
            5 => "linear-gradient(135deg, #9C27B0, #BA68C8)", // Very Poor - Purple
            _ => "linear-gradient(135deg, #9E9E9E, #BDBDBD)"  // Unknown - Gray
        };
    }

    private async Task GetPollutionDataAsync(string cityCode)
    {
        isLoadingPollution = true;
        try
        {
            var response = await HttpClient.GetFromJsonAsync<PollutionResponse>($"/data-api/rest/GetLatestAirQuality?CityCode={cityCode}");
            pollutionData = response?.Value?.FirstOrDefault();
        }
        catch
        {
            // Graceful fallback if endpoint isn't available yet
            pollutionData = null;
        }
        finally
        {
            isLoadingPollution = false;
        }
    }

    public class ApiResponse
    {
        public List<City>? Value { get; set; }
    }

    public class City
    {
        public string? Code { get; set; }
        public string? Name { get; set; }
    }

    public class WeatherResponse
    {
        public List<Weather>? Value { get; set; }
    }

    public class PollutionResponse
    {
        public List<AirQuality>? Value { get; set; }
    }

    public class AirQuality
    {
        public int aqi { get; set; }
        public double co { get; set; }
        public double no { get; set; }
        public double no2 { get; set; }
        public double o3 { get; set; }
        public double so2 { get; set; }
        public double pm2_5 { get; set; }
        public double pm10 { get; set; }
        public double nh3 { get; set; }
        public DateTime CollectionDate { get; set; }
    }

    public class Weather
    {   
        public string? Name { get; set; }
        public string? Weather_Description { get; set; }
        public string? Weather_Icon { get; set; }
        public double Main_Temp { get; set; }
        public double Main_Feels_Like { get; set; }
        public int Main_Pressure { get; set; }
        public int Main_Humidity { get; set; }
        public double Main_Temp_Min { get; set; }
        public double Main_Temp_Max { get; set; }
        public int? Main_Sea_Level { get; set; }
        public int? Main_Grnd_Level { get; set; }
        public string? Visibility { get; set; }
        public double Wind_Speed { get; set; }
        public int Wind_Deg { get; set; }
        public double? Wind_Gust { get; set; }
        public int Clouds_All { get; set; }
        public string? Rain_1h { get; set; }
        public string? Rain_3h { get; set; }
        public DateTime CollectionDate { get; set; }
        public DateTime SunriseDate { get; set; }
        public DateTime SunsetDate { get; set; }
        public string? Start_Color { get; set; }
        public string? End_Color { get; set; }
    }
}
