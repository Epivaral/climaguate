@page "/cropcityreport"
@inject HttpClient HttpClient
@using System.Text.Json

<PageTitle>Reporte de Ciudades por Cultivo</PageTitle>

<h1 style="color:#2B4C6F; font-size:1.8rem;">ðŸŒ± Reporte de Ciudades por Cultivo</h1>
<hr style="border-color:#7BCDC8; border-width:2px;" />
<div class="mb-4" style="font-size:0.85rem; line-height:1.6;">
    <p>
        Selecciona hasta 5 cultivos para ver las ciudades mÃ¡s aptas, condiciones requeridas, temporadas y si es buen momento para sembrar.
    </p>
</div>

<div class="card mb-4" style="font-size:0.85rem;">
    <div class="card-body">
        <label for="cropFilter" class="form-label">Filtrar cultivos:</label>
    <input id="cropFilter" type="text" class="form-control mb-2" value="@cropFilter" @oninput="OnFilterChanged" placeholder="Buscar cultivos por nombre, agua, meses..." />
        <div class="mb-2">
            <strong>Cultivos seleccionados:</strong>
            <span class="badge bg-success ms-2" style="font-size:0.95rem;" >@string.Join(", ", selectedCrops.Select(c => c.CropNameSpanish))</span>
        </div>
        <div style="max-height:300px; overflow-y:auto;">
            <ul class="list-group">
                @foreach (var crop in filteredCrops)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center" style="cursor:pointer;"
                        @onclick="() => ToggleCropSelection(crop)">
                        <div>
                            <strong>@crop.CropNameSpanish</strong>
                            <div class="text-muted small">@crop.CropCode</div>
                        </div>
                        <input type="checkbox" checked="@selectedCrops.Contains(crop)" disabled="@(selectedCrops.Count >= 5 && !selectedCrops.Contains(crop))" />
                    </li>
                }
            </ul>
        </div>
        <button class="btn btn-primary mt-3" @onclick="GenerateReport" disabled="@(selectedCrops.Count == 0)">Generar reporte</button>
    </div>
</div>

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status"><span class="visually-hidden">Cargando...</span></div>
}
else if (reportResults.Any())
{
    <div class="card mb-4" style="font-size:0.85rem;">
        <div class="card-body">
            <h3 class="mb-3" style="color:#2B4C6F; font-size:1.1rem;">Resultados</h3>
            @foreach (var cropResult in reportResults)
            {
                var isExpanded = expandedCrops.Contains(cropResult.CropCode);
                <div class="mb-4 border rounded" style="background:#fafafa;">
                    <div class="p-3 d-flex justify-content-between align-items-center" style="cursor:pointer;" @onclick="() => ToggleExpand(cropResult.CropCode)">
                        <div>
                            <h5 class="mb-1" style="color:#198754;">@cropResult.CropNameSpanish</h5>
                            <small class="text-muted">@cropResult.CropCode</small>
                        </div>
                        <div>
                            <span class="badge bg-success me-2" style="font-size:0.65rem;">@cropResult.Cities.Count ciudades</span>
                            <span class="badge bg-primary" style="font-size:0.65rem;">Top @cropResult.Cities.Take(3).Average(c=>c.SuitabilityScore).ToString("F0") promedio</span>
                            <span class="ms-3">@(isExpanded ? "â–²" : "â–¼")</span>
                        </div>
                    </div>
                    @if (isExpanded)
                    {
                        <div class="px-3 pb-3">
                            @if (!string.IsNullOrEmpty(cropResult.Description))
                            {
                                <div class="mb-2" style="font-size:0.75rem; line-height:1.4;">
                                    <strong>DescripciÃ³n:</strong> @cropResult.Description
                                </div>
                            }
                            <div class="row g-3 mb-2" style="font-size:0.7rem;">
                                <div class="col-md-2 d-flex align-items-stretch">
                                    <div class="border rounded p-2 w-100 bg-white text-center" style="background:#fff;">
                                        <img src="@GetCropImage(cropResult.CropCode)" alt="@cropResult.CropNameSpanish" style="max-width:100%;max-height:80px;object-fit:contain;" />
                                        <div class="small text-muted mt-1">Imagen</div>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="border rounded p-2 h-100 bg-white">
                                        <strong>Siembra:</strong>
                                        <div>@(cropResult.PlantingMonthsSpanish ?? "-")</div>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="border rounded p-2 h-100 bg-white">
                                        <strong>Cosecha:</strong>
                                        <div>@(cropResult.HarvestMonthsSpanish ?? "-")</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="border rounded p-2 h-100 bg-white">
                                        <strong>Agua:</strong>
                                        <div>@(cropResult.WaterRequirementSpanish ?? "-")</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="border rounded p-2 h-100 bg-white">
                                        <strong>Ciclo:</strong>
                                        <div>@(cropResult.GrowthCycleDays.HasValue ? cropResult.GrowthCycleDays + " dÃ­as" : "-")</div>
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <canvas id="chart_@cropResult.CropCode" width="400" height="120"></canvas>
                            </div>
                            <table class="table table-sm table-striped" style="font-size:0.7rem;">
                                <thead>
                                    <tr>
                                        <th>Ciudad</th>
                                        <th>Puntaje</th>
                                        <th>Clima</th>
                                        <th>Suelo</th>
                                        <th>Siembra</th>
                                        <th>Cosecha</th>
                                        <th>Â¿Buen momento?</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var city in cropResult.Cities)
                                    {
                                        <tr>
                                            <td>@city.CityName</td>
                                            <td><span style="color:@GetScoreColor(city.SuitabilityScore)">@city.SuitabilityScore</span></td>
                                            <td>@city.ClimateZone</td>
                                            <td>@city.SoilType</td>
                                            <td>@city.PlantingMonths</td>
                                            <td>@city.HarvestMonths</td>
                                            <td>@(IsGoodMonth(city.PlantingMonths) ? "SÃ­" : "No")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

@code {
    private List<CropInfo> allCrops = new();
    private List<CropInfo> selectedCrops = new();
    private HashSet<string> expandedCrops = new();
    private string cropFilter = "";
    private bool isLoading = false;
    private List<CropReportResult> reportResults = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCrops();
    }

    private async Task LoadCrops()
    {
        // NOTE: The GetCrops SP requires a CropCode param, so to obtain a list of crops
        // we leverage GetCropsByCity for a representative city (GUA) and then distinct the crops.
    // Load complete crop catalog via GetCrops with special 'ALL' parameter
    var response = await HttpClient.GetAsync("/data-api/rest/GetCrops?CropCode=ALL");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var wrapper = JsonSerializer.Deserialize<CropsCatalogResponse>(json, new JsonSerializerOptions{PropertyNameCaseInsensitive=true});
            allCrops = wrapper?.Value.OrderBy(c => c.CropNameSpanish).ToList() ?? new();
        }
    }

    private IEnumerable<CropInfo> filteredCrops => allCrops.Where(c =>
        string.IsNullOrWhiteSpace(cropFilter)
        || c.CropNameSpanish.Contains(cropFilter, StringComparison.OrdinalIgnoreCase)
        || (c.WaterRequirementSpanish?.Contains(cropFilter, StringComparison.OrdinalIgnoreCase) ?? false)
        || (c.PlantingMonthsSpanish?.Contains(cropFilter, StringComparison.OrdinalIgnoreCase) ?? false)
        || (c.HarvestMonthsSpanish?.Contains(cropFilter, StringComparison.OrdinalIgnoreCase) ?? false)
        || (c.Description?.Contains(cropFilter, StringComparison.OrdinalIgnoreCase) ?? false)
    );

    private void OnFilterChanged(ChangeEventArgs e)
    {
        cropFilter = e.Value?.ToString() ?? string.Empty;
    }

    private void ToggleCropSelection(CropInfo crop)
    {
        if (selectedCrops.Contains(crop))
            selectedCrops.Remove(crop);
        else if (selectedCrops.Count < 5)
            selectedCrops.Add(crop);
    }

    private void ToggleExpand(string cropCode)
    {
        if (!expandedCrops.Add(cropCode))
            expandedCrops.Remove(cropCode);
    }

    private async Task GenerateReport()
    {
        if (selectedCrops.Count == 0) return;
        isLoading = true;
        reportResults.Clear();
        try
        {
            var codes = string.Join(',', selectedCrops.Select(c => c.CropCode));
            var url = $"/data-api/rest/GetCitiesByCrop?CropCodes={Uri.EscapeDataString(codes)}";
            var response = await HttpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var wrapper = JsonSerializer.Deserialize<CitiesByCropResponse>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (wrapper?.Value != null)
                {
                    var grouped = wrapper.Value.GroupBy(r => new { r.CropCode, r.CropNameSpanish });
                    foreach (var g in grouped)
                    {
                        var cityEntries = g.Select(r => new CityReportInfo
                        {
                            CityName = r.CityName,
                            SuitabilityScore = r.SuitabilityScore,
                            ClimateZone = r.ClimateZone,
                            SoilType = r.SoilType,
                            PlantingMonths = r.PlantingMonths ?? string.Empty,
                            HarvestMonths = r.HarvestMonths ?? string.Empty
                        })
                        .OrderByDescending(c => c.SuitabilityScore)
                        .ThenBy(c => c.CityName)
                        .ToList();
                        // Build result with meta (lazy detail fetch placeholder for enhancements)
                        var meta = allCrops.FirstOrDefault(c => c.CropCode == g.Key.CropCode);
                        reportResults.Add(new CropReportResult
                        {
                            CropCode = g.Key.CropCode,
                            CropNameSpanish = g.Key.CropNameSpanish,
                            Cities = cityEntries,
                            Description = meta?.Description,
                            WaterRequirementSpanish = meta?.WaterRequirementSpanish,
                            GrowthCycleDays = meta?.GrowthCycleDays,
                            PlantingMonthsSpanish = meta?.PlantingMonthsSpanish,
                            HarvestMonthsSpanish = meta?.HarvestMonthsSpanish
                        });
                    }
                    reportResults = reportResults.OrderBy(r => r.CropNameSpanish).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            // Minimal error surface: add pseudo-result indicating failure
            reportResults.Add(new CropReportResult
            {
                CropNameSpanish = "Error",
                Cities = new List<CityReportInfo>{ new CityReportInfo{ CityName = ex.Message, SuitabilityScore = 0, ClimateZone = "", SoilType = "", PlantingMonths = "", HarvestMonths = "" } }
            });
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool IsGoodMonth(string plantingMonths)
    {
        if (string.IsNullOrWhiteSpace(plantingMonths)) return false;
        // Expect formats like JSON array: ["1","2"] or plain text with numbers.
        var month = DateTime.UtcNow.Month.ToString();
        return plantingMonths.Contains('"' + month + '"') || plantingMonths.Split(new[]{',',';',' ','-'}, StringSplitOptions.RemoveEmptyEntries).Any(m => m.Trim('"') == month);
    }

    private string GetScoreColor(int score)
    {
        return score switch
        {
            >= 85 => "#198754",  // Green
            >= 70 => "#0d6efd",  // Blue
            >= 50 => "#EF6C00",  // Orange
            >= 30 => "#dc3545",  // Red
            _ => "#212529"        // Dark
        };
    }

    public class CropsResponse { public List<CropInfo> Value { get; set; } = new(); }
    public class CropsCatalogResponse { public List<CropInfo> Value { get; set; } = new(); }
    // Response shape for GetCitiesByCrop
    public class CitiesByCropResponse { public List<CityByCropRow> Value { get; set; } = new(); }
    public class CityByCropRow
    {
        public string CropCode { get; set; } = string.Empty;
        public string CropNameSpanish { get; set; } = string.Empty;
        public string CityCode { get; set; } = string.Empty;
        public string CityName { get; set; } = string.Empty;
        public int ElevationMeters { get; set; }
        public string SoilType { get; set; } = string.Empty;
        public string ClimateZone { get; set; } = string.Empty;
        public int SuitabilityScore { get; set; }
        public bool IsPrimary { get; set; }
        public string? PlantingMonths { get; set; }
        public string? HarvestMonths { get; set; }
        public string? WaterRequirement { get; set; }
        public int? WaterRequirementMmPerWeek { get; set; }
        public int? GrowthCycleDays { get; set; }
    }
    public class CropInfo
    {
        public string CropCode { get; set; } = string.Empty;
        public string CropNameSpanish { get; set; } = string.Empty;
        public string? WaterRequirementSpanish { get; set; }
        public int? GrowthCycleDays { get; set; }
        public string? PlantingMonthsSpanish { get; set; }
        public string? HarvestMonthsSpanish { get; set; }
        public string? Description { get; set; }
        public string? CropPicture { get; set; }
    }
    public class CropReportResult
    {
        public string CropCode { get; set; } = string.Empty;
        public string CropNameSpanish { get; set; } = string.Empty;
        public string? Description { get; set; }
        public string? WaterRequirementSpanish { get; set; }
        public int? GrowthCycleDays { get; set; }
        public string? PlantingMonthsSpanish { get; set; }
        public string? HarvestMonthsSpanish { get; set; }
        public List<CityReportInfo> Cities { get; set; } = new();
    }
    public class CityReportInfo
    {
        public string CityName { get; set; } = "";
        public int SuitabilityScore { get; set; }
        public string ClimateZone { get; set; } = "";
        public string SoilType { get; set; } = "";
        public string PlantingMonths { get; set; } = "";
        public string HarvestMonths { get; set; } = "";
    }

    private string GetCropImage(string cropCode)
    {
        if (string.IsNullOrWhiteSpace(cropCode)) return "/images/placeholder.png";
        var upper = cropCode.ToUpperInvariant();
        return $"/assets/{upper}.png"; // rely on static file existing; browser 404 fallback acceptable
    }
}
