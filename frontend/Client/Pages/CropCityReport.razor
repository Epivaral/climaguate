@page "/cropcityreport"
@inject HttpClient HttpClient
@inject IJSRuntime JS
@using System.Text.Json

<PageTitle>Aptitud de Ciudades por Cultivo</PageTitle>

<h1 style="color:#2B4C6F; font-size:1.8rem;">¿Quieres empezar a sembrar? Empieza aquí
</h1>
<hr style="border-color:#7BCDC8; border-width:2px;" />
<div class="mb-4" style="font-size:0.85rem; line-height:1.6;">
    <p>
        Selecciona hasta 5 cultivos para ver las ciudades más aptas, condiciones requeridas, temporadas y si es buen momento para sembrar.
    </p>
</div>

@if (showSelector)
{
    <style>
        /* Compact crop selector on small screens */
        @@media (max-width: 576px){
            .crop-selector .card-body{ padding: .75rem; }
            .crop-selector .form-label{ font-size:.9rem; margin-bottom:.25rem; }
            .crop-selector #cropFilter{ padding:.4rem .6rem; font-size:.9rem; }
            .crop-selector .selected-badge{ font-size:.8rem !important; }
            .crop-selector-list{ max-height:45vh !important; }
            .crop-selector .list-group-item{ padding:.35rem .5rem; font-size:.9rem; }
            .crop-selector .list-group-item div{ overflow:hidden; text-overflow:ellipsis; white-space:nowrap; }
            .crop-selector .list-group-item input[type="checkbox"]{ transform: scale(0.9); }
        }
    </style>
    <div class="card mb-4 crop-selector" style="font-size:0.85rem;">
        <div class="card-body">
            <label for="cropFilter" class="form-label">Filtrar cultivos:</label>
            <input id="cropFilter" type="text" class="form-control mb-2" value="@cropFilter" @oninput="OnFilterChanged" placeholder="Buscar cultivos por nombre" />
            <div class="mb-2">
                <strong>Cultivos seleccionados (@selectedCrops.Count/5):</strong>
                <span class="badge bg-success ms-2 selected-badge" style="font-size:0.95rem;">@string.Join(", ", selectedCrops.Select(c => c.CropNameSpanish))</span>
            </div>
            <div class="crop-selector-list" style="max-height:260px; overflow-y:auto;">
                <ul class="list-group">
                    @foreach (var crop in filteredCrops)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center" style="cursor:pointer;"
                            title="Seleccionar cultivo"
                            @onclick="() => ToggleCropSelection(crop)">
                            <div>
                                <strong>@crop.CropNameSpanish</strong>
                            </div>
                            <input type="checkbox" aria-label="Seleccionar @crop.CropNameSpanish" checked="@selectedCrops.Contains(crop)" disabled="@(selectedCrops.Count >= 5 && !selectedCrops.Contains(crop))" />
                        </li>
                    }
                </ul>
            </div>
            <button class="btn btn-primary mt-3" @onclick="GenerateReport" disabled="@(selectedCrops.Count == 0)">Generar reporte</button>
        </div>
    </div>
}
else if (selectedCrops.Any())
{
    <div class="d-flex align-items-center justify-content-between mb-3 flex-wrap" style="font-size:0.8rem;">
        <div>
            <strong>Cultivos seleccionados:</strong>
            <span class="badge bg-success ms-2" style="font-size:0.85rem;">@string.Join(", ", selectedCrops.Select(c => c.CropNameSpanish))</span>
        </div>
        <div class="mt-2 mt-sm-0">
            <button class="btn btn-outline-secondary btn-sm" @onclick="ResetSearch">Nueva búsqueda</button>
        </div>
    </div>
}

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status"><span class="visually-hidden">Cargando...</span></div>
}
else if (reportResults.Any())
{
    <style>
        /* Season labels styled to match chart month band colors */
        .season-tag{ display:inline-block; padding: .15rem .4rem; border-radius:.35rem; font-size:.7rem; font-weight:600; line-height:1; }
        .season-tag.planting{ background-color: rgba(25,135,84,0.22); color:#155724; }
        .season-tag.harvest{ background-color: rgba(13,110,253,0.20); color:#0b5ed7; }
    </style>
    <div class="card mb-4" style="font-size:0.85rem;">
        <div class="card-body">
            <h3 class="mb-3" style="color:#2B4C6F; font-size:1.1rem;">Reporte de cultivos</h3>
            @foreach (var cropResult in reportResults)
            {
                var isExpanded = expandedCrops.Contains(cropResult.CropCode);
                <div class="mb-4 border rounded" style="background:#fafafa;">
                    <div class="p-3 d-flex justify-content-between align-items-center" style="cursor:pointer;" @onclick="() => ToggleExpandAsync(cropResult.CropCode)">
                        <div>
                            <h5 class="mb-1" style="color:#198754;">@cropResult.CropNameSpanish</h5>
                            @* Removed truncated inline description to avoid duplication *@
                        </div>
                        <div>
                            <span class="badge bg-success me-2" style="font-size:0.65rem;">@cropResult.Cities.Count ciudades</span>
                            <span class="badge bg-primary" style="font-size:0.65rem;">Promedio top @cropResult.Cities.Take(3).Average(c=>c.SuitabilityScore).ToString("F0")</span>
                            <span class="ms-3">@(isExpanded ? "▲" : "▼")</span>
                        </div>
                    </div>
                    @if (isExpanded)
                    {
                        <div class="px-3 pb-3">
                            <div class="row g-3 mb-3" style="font-size:0.7rem;">
                                <div class="col-md-4 col-lg-3 d-flex align-items-start">
                                    <div class="border rounded bg-white text-center" style="background:#fff;width:410px;height:410px;max-width:100%;display:flex;align-items:center;justify-content:center;">
                                        <img src="@GetCropImage(cropResult.CropCode)" alt="@cropResult.CropNameSpanish" style="width:100%;height:100%;object-fit:contain;" />
                                    </div>
                                </div>
                                <div class="col-md-8 col-lg-9">
                                    <div class="row g-3">
                                        <div class="col-sm-3">
                                            <div class="border rounded p-2 h-100 bg-white">
                                                <strong><span class="season-tag planting">Siembra</span></strong>
                                                <div>@(cropResult.PlantingMonthsSpanish ?? FormatMonths(cropResult.Cities.FirstOrDefault()?.PlantingMonths) ?? "-")</div>
                                            </div>
                                        </div>
                                        <div class="col-sm-3">
                                            <div class="border rounded p-2 h-100 bg-white">
                                                <strong><span class="season-tag harvest">Cosecha</span></strong>
                                                <div>@(cropResult.HarvestMonthsSpanish ?? FormatMonths(cropResult.Cities.FirstOrDefault()?.HarvestMonths) ?? "-")</div>
                                            </div>
                                        </div>
                                        <div class="col-sm-3">
                                            <div class="border rounded p-2 h-100 bg-white">
                                                <strong>Agua:</strong>
                                                <div>
                                                    @if (cropResult.WaterRequirementMmPerWeek.HasValue)
                                                    {<span>@cropResult.WaterRequirementMmPerWeek mm/sem (@(cropResult.WaterRequirementSpanish ?? ""))</span>}
                                                    else
                                                    {<span>@(cropResult.WaterRequirementSpanish ?? "-")</span>}
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-3">
                                            <div class="border rounded p-2 h-100 bg-white">
                                                <strong>Ciclo:</strong>
                                                <div>@(cropResult.GrowthCycleDays.HasValue ? cropResult.GrowthCycleDays + " días" : "-")</div>
                                            </div>
                                        </div>
                                        <div class="col-sm-3">
                                            <div class="border rounded p-2 h-100 bg-white">
                                                <strong>Temp. Óptima:</strong>
                                                <div>@(FormatRange(cropResult.OptimalTempMin, cropResult.OptimalTempMax, "°C"))</div>
                                            </div>
                                        </div>
                                        <div class="col-sm-3">
                                            <div class="border rounded p-2 h-100 bg-white">
                                                <strong>Humedad Óptima:</strong>
                                                <div>@(FormatRange(cropResult.OptimalHumidityMin, cropResult.OptimalHumidityMax, "%"))</div>
                                            </div>
                                        </div>
                                        @if (!string.IsNullOrEmpty(cropResult.Description))
                                        {
                                            <div class="col-12">
                                                <div class="border rounded p-2 bg-white mb-1" style="font-size:0.65rem; line-height:1.3;">
                                                    <strong>Descripción:</strong> @cropResult.Description
                                                </div>
                                            </div>
                                        }
                                        <div class="col-12">
                                            <div class="crop-chart-wrapper" style="position:relative;">
                                                <div class="crop-chart-box" style="width:400px;height:300px;position:relative;">
                                                    <canvas class="crop-chart-canvas" id="bands_@cropResult.CropCode" width="400" height="300"></canvas>
                                                    
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            @* Chart moved inside right column *@
                            <table class="table table-sm table-striped" style="font-size:0.65rem;">
                                <thead>
                                    <tr>
                                        <th>Ciudad</th>
                                        <th>Puntaje</th>
                                        <th>Clima</th>
                                        <th>Suelo</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var city in cropResult.Cities)
                                    {
                                        <tr>
                                            <td>@city.CityName</td>
                                            <td><span style="color:@GetScoreColor(city.SuitabilityScore)">@city.SuitabilityScore</span></td>
                                            <td title="@GetClimateDescription(city.ClimateZone)">@city.ClimateZone</td>
                                            <td title="@GetSoilDescription(city.SoilType)">@city.SoilType</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

@code {
    private List<CropInfo> allCrops = new();
    private List<CropInfo> selectedCrops = new();
    private HashSet<string> expandedCrops = new();
    private HashSet<string> loadedDetails = new();
    private string cropFilter = "";
    private bool isLoading = false;
    private List<CropReportResult> reportResults = new();
    private bool showSelector = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCrops();
    }

    private async Task LoadCrops()
    {
        // NOTE: The GetCrops SP requires a CropCode param, so to obtain a list of crops
        // we leverage GetCropsByCity for a representative city (GUA) and then distinct the crops.
    // Load complete crop catalog via GetCrops with special 'ALL' parameter
    var response = await HttpClient.GetAsync("/data-api/rest/GetCrops?CropCode=ALL");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var wrapper = JsonSerializer.Deserialize<CropsCatalogResponse>(json, new JsonSerializerOptions{PropertyNameCaseInsensitive=true});
            allCrops = wrapper?.Value.OrderBy(c => c.CropNameSpanish).ToList() ?? new();
        }
    }

    private IEnumerable<CropInfo> filteredCrops => allCrops.Where(c =>
        string.IsNullOrWhiteSpace(cropFilter)
        || c.CropNameSpanish.Contains(cropFilter, StringComparison.OrdinalIgnoreCase)
        || (c.WaterRequirementSpanish?.Contains(cropFilter, StringComparison.OrdinalIgnoreCase) ?? false)
        || (c.PlantingMonthsSpanish?.Contains(cropFilter, StringComparison.OrdinalIgnoreCase) ?? false)
        || (c.HarvestMonthsSpanish?.Contains(cropFilter, StringComparison.OrdinalIgnoreCase) ?? false)
        || (c.Description?.Contains(cropFilter, StringComparison.OrdinalIgnoreCase) ?? false)
    );

    private void OnFilterChanged(ChangeEventArgs e)
    {
        cropFilter = e.Value?.ToString() ?? string.Empty;
    }

    private void ToggleCropSelection(CropInfo crop)
    {
        if (selectedCrops.Contains(crop))
            selectedCrops.Remove(crop);
        else if (selectedCrops.Count < 5)
            selectedCrops.Add(crop);
    }

    private async Task ToggleExpandAsync(string cropCode)
    {
        if (!expandedCrops.Add(cropCode))
        {
            expandedCrops.Remove(cropCode);
            return;
        }
        var target = reportResults.FirstOrDefault(r => r.CropCode == cropCode);
        if (target != null && !loadedDetails.Contains(cropCode))
        {
            await LoadCropDetail(target);
            loadedDetails.Add(cropCode);
        }
    // Queue chart rendering for this crop
    _pendingBandRenders.Add(cropCode);
    }

    private async Task LoadCropDetail(CropReportResult result)
    {
        try
        {
            var response = await HttpClient.GetAsync($"/data-api/rest/GetCrops?CropCode={Uri.EscapeDataString(result.CropCode)}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var doc = JsonDocument.Parse(json);
                var crop = doc.RootElement.GetProperty("value").EnumerateArray().FirstOrDefault();
                if (crop.ValueKind != JsonValueKind.Undefined)
                {
                    result.Description = GetPropertyOrDefault(crop, "Description");
                    result.WaterRequirementSpanish = GetPropertyOrDefault(crop, "WaterRequirementSpanish");
                    result.GrowthCycleDays = GetPropertyOrDefaultInt(crop, "GrowthCycleDays");
                    result.PlantingMonthsSpanish = GetPropertyOrDefault(crop, "PlantingMonthsSpanish");
                    result.HarvestMonthsSpanish = GetPropertyOrDefault(crop, "HarvestMonthsSpanish");
                    result.OptimalTempMin = GetPropertyOrDefaultInt(crop, "OptimalTempMin");
                    result.OptimalTempMax = GetPropertyOrDefaultInt(crop, "OptimalTempMax");
                    result.OptimalHumidityMin = GetPropertyOrDefaultInt(crop, "OptimalHumidityMin");
                    result.OptimalHumidityMax = GetPropertyOrDefaultInt(crop, "OptimalHumidityMax");
                    result.WaterRequirementMmPerWeek = GetPropertyOrDefaultInt(crop, "WaterRequirementMmPerWeek");
                }
            }
        }
        catch { }
    }

    private async Task GenerateReport()
    {
        if (selectedCrops.Count == 0) return;
        isLoading = true;
        reportResults.Clear();
        try
        {
            var codes = string.Join(',', selectedCrops.Select(c => c.CropCode));
            var url = $"/data-api/rest/GetCitiesByCrop?CropCodes={Uri.EscapeDataString(codes)}";
            var response = await HttpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var wrapper = JsonSerializer.Deserialize<CitiesByCropResponse>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (wrapper?.Value != null)
                {
                    var grouped = wrapper.Value.GroupBy(r => new { r.CropCode, r.CropNameSpanish });
                    foreach (var g in grouped)
                    {
                        var cityEntries = g.Select(r => new CityReportInfo
                        {
                            CityName = r.CityName,
                            SuitabilityScore = r.SuitabilityScore,
                            ClimateZone = r.ClimateZone,
                            SoilType = r.SoilType,
                            PlantingMonths = r.PlantingMonths ?? string.Empty,
                            HarvestMonths = r.HarvestMonths ?? string.Empty
                        })
                        .OrderByDescending(c => c.SuitabilityScore)
                        .ThenBy(c => c.CityName)
                        .ToList();
                        // Build result with meta (lazy detail fetch placeholder for enhancements)
                        var meta = allCrops.FirstOrDefault(c => c.CropCode == g.Key.CropCode);
                        reportResults.Add(new CropReportResult
                        {
                            CropCode = g.Key.CropCode,
                            CropNameSpanish = g.Key.CropNameSpanish,
                            Cities = cityEntries,
                            Description = meta?.Description,
                            WaterRequirementSpanish = meta?.WaterRequirementSpanish,
                            GrowthCycleDays = meta?.GrowthCycleDays,
                            PlantingMonthsSpanish = meta?.PlantingMonthsSpanish,
                            HarvestMonthsSpanish = meta?.HarvestMonthsSpanish
                        });
                    }
                    reportResults = reportResults.OrderBy(r => r.CropNameSpanish).ToList();
                    showSelector = false; // hide selector after successful generation
                }
            }
        }
        catch (Exception ex)
        {
            // Minimal error surface: add pseudo-result indicating failure
            reportResults.Add(new CropReportResult
            {
                CropNameSpanish = "Error",
                Cities = new List<CityReportInfo>{ new CityReportInfo{ CityName = ex.Message, SuitabilityScore = 0, ClimateZone = "", SoilType = "", PlantingMonths = "", HarvestMonths = "" } }
            });
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ResetSearch()
    {
        selectedCrops.Clear();
        reportResults.Clear();
        expandedCrops.Clear();
        loadedDetails.Clear();
        cropFilter = string.Empty;
        showSelector = true;
    _pendingBandRenders.Clear();
    }

    private bool IsGoodMonth(string plantingMonths)
    {
        if (string.IsNullOrWhiteSpace(plantingMonths)) return false;
        // Expect formats like JSON array: ["1","2"] or plain text with numbers.
        var month = DateTime.UtcNow.Month.ToString();
        return plantingMonths.Contains('"' + month + '"') || plantingMonths.Split(new[]{',',';',' ','-'}, StringSplitOptions.RemoveEmptyEntries).Any(m => m.Trim('"') == month);
    }

    private string GetScoreColor(int score)
    {
        return score switch
        {
            >= 85 => "#198754",  // Green
            >= 70 => "#0d6efd",  // Blue
            >= 50 => "#EF6C00",  // Orange
            >= 30 => "#dc3545",  // Red
            _ => "#212529"        // Dark
        };
    }

    private HashSet<string> _pendingBandRenders = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_pendingBandRenders.Count == 0) return;
        var list = _pendingBandRenders.ToList();
        _pendingBandRenders.Clear();
        foreach (var code in list)
        {
            var crop = reportResults.FirstOrDefault(c=>c.CropCode==code);
            if (crop == null) continue;
            var avg = crop.Cities.Take(3).Any() ? crop.Cities.Take(3).Average(c=>c.SuitabilityScore) : 0;
            try
            {
                // Use raw numeric months from first city to ensure highlight (formatted Spanish strings would not parse)
                var firstCity = crop.Cities.FirstOrDefault();
                await JS.InvokeVoidAsync("renderCropBands", $"bands_{code}", firstCity?.PlantingMonths, firstCity?.HarvestMonths, avg);
            }
            catch { }
        }
    }

    private string? FormatMonths(string? raw)
    {
        if (string.IsNullOrWhiteSpace(raw)) return null;
        // Expect formats like ["9","10"] or "9,10".
        var trimmed = raw.Trim();
        trimmed = trimmed.Trim('[',']').Replace("\"", "");
        var parts = trimmed.Split(new[]{',',';',' '}, StringSplitOptions.RemoveEmptyEntries)
            .Select(p => p.Trim().Trim('"'))
            .Where(p => int.TryParse(p, out _))
            .Select(p => int.Parse(p))
            .Distinct()
            .OrderBy(p => p)
            .ToList();
        if (!parts.Any()) return raw;
        string Name(int m) => new[]{"Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dic"}[Math.Clamp(m-1,0,11)];
        // Collapse consecutive ranges
        var ranges = new List<string>();
        int start = parts[0];
        int prev = parts[0];
        for (int i=1;i<parts.Count;i++)
        {
            if (parts[i] == prev + 1) { prev = parts[i]; continue; }
            ranges.Add(start == prev ? Name(start) : $"{Name(start)}-{Name(prev)}");
            start = prev = parts[i];
        }
        ranges.Add(start == prev ? Name(start) : $"{Name(start)}-{Name(prev)}");
        return string.Join(" · ", ranges);
    }

    private string GetSoilDescription(string soil) => soil switch
    {
        "Andosol" => "Suelos volcánicos fértiles",
        "Fluvisol" => "Suelos aluviales fértiles",
        "Acrisol" => "Suelos ácidos tropicales",
        _ => soil
    };
    private string GetClimateDescription(string climate) => climate switch
    {
        "Cwb" => "Templado de montaña (verano fresco)",
        "Cwa" => "Subtropical húmedo invierno seco",
        "Aw" => "Sabana tropical",
        _ => climate
    };

    private string GetSoilDescriptionShort(string soil) => GetSoilDescription(soil);
    private string GetSoilDescriptionWrapper(string soil) => GetSoilDescription(soil);

    // JSON helper methods (not extension methods to avoid nested static class requirement)
    private string? GetPropertyOrDefault(JsonElement el, string name)
        => el.TryGetProperty(name, out var v) && v.ValueKind != JsonValueKind.Null ? v.GetString() : null;
    private int? GetPropertyOrDefaultInt(JsonElement el, string name)
        => el.TryGetProperty(name, out var v) && v.ValueKind==JsonValueKind.Number ? v.GetInt32() : (int?)null;

    public class CropsResponse { public List<CropInfo> Value { get; set; } = new(); }
    public class CropsCatalogResponse { public List<CropInfo> Value { get; set; } = new(); }
    // Response shape for GetCitiesByCrop
    public class CitiesByCropResponse { public List<CityByCropRow> Value { get; set; } = new(); }
    public class CityByCropRow
    {
        public string CropCode { get; set; } = string.Empty;
        public string CropNameSpanish { get; set; } = string.Empty;
        public string CityCode { get; set; } = string.Empty;
        public string CityName { get; set; } = string.Empty;
        public int ElevationMeters { get; set; }
        public string SoilType { get; set; } = string.Empty;
        public string ClimateZone { get; set; } = string.Empty;
        public int SuitabilityScore { get; set; }
        public bool IsPrimary { get; set; }
        public string? PlantingMonths { get; set; }
        public string? HarvestMonths { get; set; }
        public string? WaterRequirement { get; set; }
        public int? WaterRequirementMmPerWeek { get; set; }
        public int? GrowthCycleDays { get; set; }
    }
    public class CropInfo
    {
        public string CropCode { get; set; } = string.Empty;
        public string CropNameSpanish { get; set; } = string.Empty;
        public string? WaterRequirementSpanish { get; set; }
        public int? GrowthCycleDays { get; set; }
        public string? PlantingMonthsSpanish { get; set; }
        public string? HarvestMonthsSpanish { get; set; }
        public string? Description { get; set; }
        public string? CropPicture { get; set; }
    }
    public class CropReportResult
    {
        public string CropCode { get; set; } = string.Empty;
        public string CropNameSpanish { get; set; } = string.Empty;
        public string? Description { get; set; }
        public string? WaterRequirementSpanish { get; set; }
        public int? GrowthCycleDays { get; set; }
        public string? PlantingMonthsSpanish { get; set; }
        public string? HarvestMonthsSpanish { get; set; }
        public int? OptimalTempMin { get; set; }
        public int? OptimalTempMax { get; set; }
        public int? OptimalHumidityMin { get; set; }
        public int? OptimalHumidityMax { get; set; }
        public int? WaterRequirementMmPerWeek { get; set; }
        public List<CityReportInfo> Cities { get; set; } = new();
    }
    public class CityReportInfo
    {
        public string CityName { get; set; } = "";
        public int SuitabilityScore { get; set; }
        public string ClimateZone { get; set; } = "";
        public string SoilType { get; set; } = "";
        public string PlantingMonths { get; set; } = "";
        public string HarvestMonths { get; set; } = "";
    }

    private string GetCropImage(string cropCode)
    {
        if (string.IsNullOrWhiteSpace(cropCode)) return "/images/placeholder.png";
        var upper = cropCode.ToUpperInvariant();
        return $"/assets/{upper}.png"; // rely on static file existing; browser 404 fallback acceptable
    }

    private string FormatRange(int? min, int? max, string unit)
    {
        if (min.HasValue && max.HasValue) return $"{min}{unit} - {max}{unit}";
        if (min.HasValue) return $">= {min}{unit}";
        if (max.HasValue) return $"<= {max}{unit}";
        return "-";
    }
}
