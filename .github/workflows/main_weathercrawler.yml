# Deploys a Python Azure Function App (classic Consumption) on push to main
name: Build and deploy Python project to Azure Function App - WeatherCrawler

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'backend'
  PYTHON_VERSION: '3.11'  # Match Function App stack version

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Optional: validate imports / run unit tests before deploying
      - name: Install deps for local checks (does not affect deploy)
        run: |
            python -m pip install --upgrade pip
            pip install -r ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/requirements.txt

      # Upload the FOLDER (no zip) so Oryx does a remote build on Azure
      - name: Upload artifact (backend folder)
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-app
          path: .

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_EEC4DA0432B046AD911A7C033F57FF0D }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_BEF3206F984C4D31AE75C07BD41376A1 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_C2ED6ADB009649589FFAD0BB219EA4A3 }}

      - name: Deploy to Azure Functions (remote build with Oryx)
        uses: Azure/functions-action@v1
        with:
          app-name: 'WeatherCrawler'
          slot-name: 'Production'
          package: ./backend                # IMPORTANT: folder, not a zip
          scm-do-build-during-deployment: true
          enable-oryx-build: true
          remote-build: true

      # Explicit trigger sync after deploy
      - name: Sync triggers
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az functionapp sync-functions --name WeatherCrawler --resource-group climaguate_rg
